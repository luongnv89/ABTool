<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<HTML>
<HEAD>
<TITLE>Grammar ./expandedBEvent.g</TITLE>
</HEAD>
<BODY>
<table summary="" border="1" cellpadding="5">
<tr>
<td>
<font size="+2">Grammar BEventParser</font><br>
<a href="http://www.ANTLR.org">ANTLR</a>-generated HTML file from ./expandedBEvent.g
<p>
Terence Parr, <a href="http://www.magelang.com">MageLang Institute</a>
<br>ANTLR Version 2.7.7 (2006-11-01); 1989-2005
</td>
</tr>
</table>
<PRE>

Definition of parser BEventParser, which is a subclass of LLkParser.


<a name="composant">composant</a>
	:	
		(	<a href="BEventParser.html#machine">machine</a> 
		|	<a href="BEventParser.html#refinement">refinement</a> 
		|	
		) 
	;


<a name="machine">machine</a>
	:	&quot;SYSTEM&quot; <a href="BEventParser.html#paramName">paramName</a> 
		(	<a href="BEventParser.html#constraints">constraints</a> 
		|	<a href="BEventParser.html#sees">sees</a> 
		|	<a href="BEventParser.html#sets">sets</a> 
		|	<a href="BEventParser.html#constants">constants</a> 
		|	<a href="BEventParser.html#aconstants">aconstants</a> 
		|	<a href="BEventParser.html#properties">properties</a> 
		|	<a href="BEventParser.html#variables">variables</a> 
		|	<a href="BEventParser.html#cvariables">cvariables</a> 
		|	<a href="BEventParser.html#invariant">invariant</a> 
		|	<a href="BEventParser.html#assertions">assertions</a> 
		|	<a href="BEventParser.html#initialisation_mch">initialisation_mch</a> 
		|	<a href="BEventParser.html#events_mch">events_mch</a> 
		|	<a href="BEventParser.html#modalities">modalities</a> 
		)* 
		&quot;END&quot; EOF 
	;


<a name="refinement">refinement</a>
	:	&quot;REFINEMENT&quot; <a href="BEventParser.html#paramName">paramName</a> 
		(	<a href="BEventParser.html#refines">refines</a> 
		|	<a href="BEventParser.html#constraints">constraints</a> 
		|	<a href="BEventParser.html#sees">sees</a> 
		|	<a href="BEventParser.html#sets">sets</a> 
		|	<a href="BEventParser.html#aconstants">aconstants</a> 
		|	<a href="BEventParser.html#constants">constants</a> 
		|	<a href="BEventParser.html#properties">properties</a> 
		|	<a href="BEventParser.html#variables">variables</a> 
		|	<a href="BEventParser.html#cvariables">cvariables</a> 
		|	<a href="BEventParser.html#invariant">invariant</a> 
		|	<a href="BEventParser.html#variant">variant</a> 
		|	<a href="BEventParser.html#assertions">assertions</a> 
		|	<a href="BEventParser.html#initialisation_ref">initialisation_ref</a> 
		|	<a href="BEventParser.html#events_ref">events_ref</a> 
		|	<a href="BEventParser.html#modalities">modalities</a> 
		)* 
		&quot;END&quot; EOF 
	;


<a name="paramName">paramName</a>
	:	B_IDENTIFIER 
		(	B_LPAREN <a href="BEventParser.html#listIdentifier">listIdentifier</a> B_RPAREN 
		|	
		) 
	;


<a name="constraints">constraints</a>
	:	&quot;CONSTRAINTS&quot; <a href="BEventParser.html#expression">expression</a> 
	;


<a name="sees">sees</a>
	:	&quot;SEES&quot; <a href="BEventParser.html#listNames">listNames</a> 
	;


<a name="sets">sets</a>
	:	&quot;SETS&quot; <a href="BEventParser.html#sets_declaration">sets_declaration</a> 
	;


<a name="constants">constants</a>
	:	(	&quot;CONSTANTS&quot; 
		|	&quot;CONCRETE_CONSTANTS&quot; 
		|	&quot;VISIBLE_CONSTANTS&quot; 
		) 
		<a href="BEventParser.html#listIdentifier">listIdentifier</a> 
	;


<a name="aconstants">aconstants</a>
	:	(	&quot;ABSTRACT_CONSTANTS&quot; 
		|	&quot;HIDDEN_CONSTANTS&quot; 
		) 
		<a href="BEventParser.html#listIdentifier">listIdentifier</a> 
	;


<a name="properties">properties</a>
	:	&quot;PROPERTIES&quot; <a href="BEventParser.html#expression">expression</a> 
	;


<a name="variables">variables</a>
	:	(	&quot;VARIABLES&quot; 
		|	&quot;ABSTRACT_VARIABLES&quot; 
		|	&quot;VISIBLE_VARIABLES&quot; 
		) 
		<a href="BEventParser.html#listIdentifier">listIdentifier</a> 
	;


<a name="cvariables">cvariables</a>
	:	(	&quot;HIDDEN_VARIABLES&quot; 
		|	&quot;CONCRETE_VARIABLES&quot; 
		) 
		<a href="BEventParser.html#listIdentifier">listIdentifier</a> 
	;


<a name="invariant">invariant</a>
	:	&quot;INVARIANT&quot; <a href="BEventParser.html#expression">expression</a> 
	;


<a name="assertions">assertions</a>
	:	&quot;ASSERTIONS&quot; <a href="BEventParser.html#list_assertions">list_assertions</a> 
	;


<a name="initialisation_mch">initialisation_mch</a>
	:	&quot;INITIALISATION&quot; <a href="BEventParser.html#substitution_mch">substitution_mch</a> 
	;


<a name="events_mch">events_mch</a>
	:	&quot;EVENTS&quot; <a href="BEventParser.html#listEventMch">listEventMch</a> 
	;


<a name="modalities">modalities</a>
	:	&quot;MODALITIES&quot; <a href="BEventParser.html#modality">modality</a> 
	;


<a name="listEventMch">listEventMch</a>
	:	<a href="BEventParser.html#eventMch">eventMch</a> ( B_SEMICOLON <a href="BEventParser.html#eventMch">eventMch</a> )* 
	;


<a name="eventMch">eventMch</a>
	:	<a href="BEventParser.html#nameRenamed">nameRenamed</a> B_EQUAL <a href="BEventParser.html#substitution_event_mch">substitution_event_mch</a> 
	;


<a name="nameRenamed">nameRenamed</a>
	:	B_IDENTIFIER ( B_POINT B_IDENTIFIER )* 
	;


<a name="substitution_event_mch">substitution_event_mch</a>
	:	<a href="BEventParser.html#substitution_mch">substitution_mch</a> 
	;


<a name="substitution_mch">substitution_mch</a>
	:	<a href="BEventParser.html#parallele_mch">parallele_mch</a> 
	;


<a name="modality">modality</a>
	:	&quot;ANY&quot; <a href="BEventParser.html#listIdentifier">listIdentifier</a> &quot;WHERE&quot; <a href="BEventParser.html#expression">expression</a> &quot;THEN&quot; <a href="BEventParser.html#event_list">event_list</a> 
		(	<a href="BEventParser.html#maintain">maintain</a> 
		|	<a href="BEventParser.html#establish">establish</a> 
		) 
		&quot;END&quot; 
	|	&quot;BEGIN&quot; <a href="BEventParser.html#event_list">event_list</a> 
		(	<a href="BEventParser.html#maintain">maintain</a> 
		|	<a href="BEventParser.html#establish">establish</a> 
		) 
		&quot;END&quot; 
	|	&quot;SELECT&quot; <a href="BEventParser.html#predicate">predicate</a> &quot;THEN&quot; <a href="BEventParser.html#event_list">event_list</a> <a href="BEventParser.html#establish">establish</a> &quot;END&quot; 
	;


<a name="listIdentifier">listIdentifier</a>
	:	<a href="BEventParser.html#nameRenamed">nameRenamed</a> ( B_COMMA <a href="BEventParser.html#nameRenamed">nameRenamed</a> )* 
	;


<a name="expression">expression</a>
	:	<a href="BEventParser.html#logical_1">logical_1</a> ( B_IMPLIES <a href="BEventParser.html#logical_1">logical_1</a> )* 
	;


<a name="event_list">event_list</a>
	:	&quot;ALL&quot; 
	|	<a href="BEventParser.html#listIdentifier">listIdentifier</a> 
	;


<a name="maintain">maintain</a>
	:	&quot;MAINTAIN&quot; <a href="BEventParser.html#predicate">predicate</a> &quot;UNTIL&quot; <a href="BEventParser.html#predicate">predicate</a> &quot;VARIANT&quot; <a href="BEventParser.html#a_variant">a_variant</a> 
	;


<a name="establish">establish</a>
	:	&quot;ESTABLISH&quot; <a href="BEventParser.html#expression">expression</a> 
	;


<a name="predicate">predicate</a>
	:	<a href="BEventParser.html#plogical_1">plogical_1</a> ( B_IMPLIES <a href="BEventParser.html#plogical_1">plogical_1</a> )* 
	;


protected <a name="a_variant">a_variant</a>
	:	<a href="BEventParser.html#predicate">predicate</a> 
	;


<a name="refines">refines</a>
	:	&quot;REFINES&quot; B_IDENTIFIER 
	;


protected <a name="variant">variant</a>
	:	&quot;VARIANT&quot; <a href="BEventParser.html#a_variant">a_variant</a> 
	;


<a name="initialisation_ref">initialisation_ref</a>
	:	&quot;INITIALISATION&quot; <a href="BEventParser.html#parallele_ref">parallele_ref</a> 
	;


<a name="events_ref">events_ref</a>
	:	&quot;EVENTS&quot; <a href="BEventParser.html#listEventRef">listEventRef</a> 
	;


<a name="listEventRef">listEventRef</a>
	:	<a href="BEventParser.html#eventRef">eventRef</a> ( B_SEMICOLON <a href="BEventParser.html#eventRef">eventRef</a> )* 
	;


<a name="eventRef">eventRef</a>
	:	<a href="BEventParser.html#an_event_ref">an_event_ref</a> B_EQUAL <a href="BEventParser.html#substitution_event_ref">substitution_event_ref</a> 
	;


<a name="an_event_ref">an_event_ref</a>
	:	<a href="BEventParser.html#nameRenamed">nameRenamed</a> 
		(	B_ref <a href="BEventParser.html#listNameRenamed">listNameRenamed</a> 
		|	
		) 
	;


<a name="substitution_event_ref">substitution_event_ref</a>
	:	<a href="BEventParser.html#parallele_ref">parallele_ref</a> 
	;


<a name="listNameRenamed">listNameRenamed</a>
	:	<a href="BEventParser.html#nameRenamed">nameRenamed</a> ( B_COMMA <a href="BEventParser.html#nameRenamed">nameRenamed</a> )* 
	;


<a name="parallele_ref">parallele_ref</a>
	:	<a href="BEventParser.html#subst_ref">subst_ref</a> ( (	B_PARALLEL 
			|	B_SEMICOLON 
			) 
			<a href="BEventParser.html#subst_ref">subst_ref</a> )* 
	;


protected <a name="substitution_block_mch">substitution_block_mch</a>
	:	&quot;BEGIN&quot; <a href="BEventParser.html#substitution_mch">substitution_mch</a> 
		(	&quot;POST&quot; <a href="BEventParser.html#predicate">predicate</a> 
		|	
		) 
		&quot;END&quot; 
	;


protected <a name="substitution_block_ref">substitution_block_ref</a>
	:	&quot;BEGIN&quot; <a href="BEventParser.html#parallele_ref">parallele_ref</a> 
		(	&quot;POST&quot; <a href="BEventParser.html#predicate">predicate</a> 
		|	
		) 
		&quot;END&quot; 
	;


protected <a name="substitution_precondition_mch">substitution_precondition_mch</a>
	:	&quot;PRE&quot; <a href="BEventParser.html#expression">expression</a> &quot;THEN&quot; <a href="BEventParser.html#substitution_mch">substitution_mch</a> 
		(	&quot;POST&quot; <a href="BEventParser.html#predicate">predicate</a> 
		|	
		) 
		&quot;END&quot; 
	;


protected <a name="substitution_precondition_ref">substitution_precondition_ref</a>
	:	&quot;PRE&quot; <a href="BEventParser.html#expression">expression</a> &quot;THEN&quot; <a href="BEventParser.html#parallele_ref">parallele_ref</a> 
		(	&quot;POST&quot; <a href="BEventParser.html#predicate">predicate</a> 
		|	
		) 
		&quot;END&quot; 
	;


protected <a name="substitution_selection_mch">substitution_selection_mch</a>
	:	&quot;SELECT&quot; <a href="BEventParser.html#expression">expression</a> &quot;THEN&quot; <a href="BEventParser.html#substitution_mch">substitution_mch</a> 
		(	&quot;POST&quot; <a href="BEventParser.html#predicate">predicate</a> 
		|	
		) 
		&quot;END&quot; 
	;


protected <a name="substitution_selection_ref">substitution_selection_ref</a>
	:	&quot;SELECT&quot; <a href="BEventParser.html#expression">expression</a> &quot;THEN&quot; <a href="BEventParser.html#parallele_ref">parallele_ref</a> 
		(	&quot;POST&quot; <a href="BEventParser.html#predicate">predicate</a> 
		|	
		) 
		&quot;END&quot; 
	;


protected <a name="substitution_unbounded_choice_mch">substitution_unbounded_choice_mch</a>
	:	&quot;ANY&quot; <a href="BEventParser.html#listIdentifier">listIdentifier</a> &quot;WHERE&quot; <a href="BEventParser.html#expression">expression</a> &quot;THEN&quot; <a href="BEventParser.html#substitution_mch">substitution_mch</a> 
		(	&quot;POST&quot; <a href="BEventParser.html#predicate">predicate</a> 
		|	
		) 
		&quot;END&quot; 
	;


protected <a name="substitution_unbounded_choice_ref">substitution_unbounded_choice_ref</a>
	:	&quot;ANY&quot; <a href="BEventParser.html#listIdentifier">listIdentifier</a> &quot;WHERE&quot; <a href="BEventParser.html#expression">expression</a> &quot;THEN&quot; <a href="BEventParser.html#parallele_ref">parallele_ref</a> 
		(	&quot;POST&quot; <a href="BEventParser.html#predicate">predicate</a> 
		|	
		) 
		&quot;END&quot; 
	;


protected <a name="predInvertedParamInvertedQuoted">predInvertedParamInvertedQuoted</a>
	:	<a href="BEventParser.html#predInvertedParamInverted">predInvertedParamInverted</a> ( B_QUOTEIDENT <a href="BEventParser.html#predInvertedParamInverted">predInvertedParamInverted</a> )* 
	;


protected <a name="predInvertedParamInverted">predInvertedParamInverted</a>
	:	<a href="BEventParser.html#predInvertedParam">predInvertedParam</a> 
		(	B_TILDE 
		|	
		) 
	;


<a name="dummy">dummy</a>
	:	B_PREC 
	|	B_ANY_POST 
	|	B_SELECT_POST 
	|	B_PRE_POST 
	|	B_BEGIN_POST 
	;


<a name="implementation">implementation</a>
	:	&quot;IMPLEMENTATION&quot; <a href="BEventParser.html#paramName">paramName</a> 
		(	<a href="BEventParser.html#refines">refines</a> 
		|	<a href="BEventParser.html#implink">implink</a> 
		|	<a href="BEventParser.html#values">values</a> 
		|	<a href="BEventParser.html#sets">sets</a> 
		|	<a href="BEventParser.html#constants">constants</a> 
		|	<a href="BEventParser.html#properties">properties</a> 
		|	<a href="BEventParser.html#variables">variables</a> 
		|	<a href="BEventParser.html#cvariables">cvariables</a> 
		|	<a href="BEventParser.html#invariant">invariant</a> 
		|	<a href="BEventParser.html#assertions">assertions</a> 
		|	<a href="BEventParser.html#definitions_imp">definitions_imp</a> 
		|	<a href="BEventParser.html#initialisation_imp">initialisation_imp</a> 
		)* 
		(	<a href="BEventParser.html#operations_imp">operations_imp</a> 
			(	<a href="BEventParser.html#definitions_imp">definitions_imp</a> 
			|	
			) 
		|	
		) 
		&quot;END&quot; EOF 
	;


<a name="implink">implink</a>
	:	<a href="BEventParser.html#sees">sees</a> 
	|	<a href="BEventParser.html#imports">imports</a> 
	|	<a href="BEventParser.html#extendeds">extendeds</a> 
	|	<a href="BEventParser.html#promotes">promotes</a> 
	;


<a name="values">values</a>
	:	&quot;VALUES&quot; <a href="BEventParser.html#list_valuation">list_valuation</a> 
	;


<a name="definitions_imp">definitions_imp</a>
	:	&quot;DEFINITIONS&quot; <a href="BEventParser.html#list_def_imp">list_def_imp</a> 
	;


<a name="initialisation_imp">initialisation_imp</a>
	:	&quot;INITIALISATION&quot; <a href="BEventParser.html#sequential">sequential</a> 
	;


<a name="operations_imp">operations_imp</a>
	:	&quot;OPERATIONS&quot; <a href="BEventParser.html#listOperationImp">listOperationImp</a> 
	;


<a name="paramRename">paramRename</a>
	:	<a href="BEventParser.html#nameRenamed">nameRenamed</a> 
		(	B_LPAREN <a href="BEventParser.html#listIdentifier">listIdentifier</a> B_RPAREN 
		|	
		) 
	;


<a name="mchlink">mchlink</a>
	:	<a href="BEventParser.html#uses">uses</a> 
	|	<a href="BEventParser.html#includes">includes</a> 
	|	<a href="BEventParser.html#sees">sees</a> 
	|	<a href="BEventParser.html#extendeds">extendeds</a> 
	|	<a href="BEventParser.html#promotes">promotes</a> 
	;


<a name="uses">uses</a>
	:	&quot;USES&quot; <a href="BEventParser.html#listNames">listNames</a> 
	;


<a name="includes">includes</a>
	:	&quot;INCLUDES&quot; <a href="BEventParser.html#listInstanciation">listInstanciation</a> 
	;


<a name="extendeds">extendeds</a>
	:	&quot;EXTENDS&quot; <a href="BEventParser.html#listInstanciation">listInstanciation</a> 
	;


<a name="promotes">promotes</a>
	:	&quot;PROMOTES&quot; <a href="BEventParser.html#listNames">listNames</a> 
	;


<a name="reflink">reflink</a>
	:	<a href="BEventParser.html#includes">includes</a> 
	|	<a href="BEventParser.html#sees">sees</a> 
	|	<a href="BEventParser.html#extendeds">extendeds</a> 
	|	<a href="BEventParser.html#promotes">promotes</a> 
	;


<a name="imports">imports</a>
	:	&quot;IMPORTS&quot; <a href="BEventParser.html#listInstanciation">listInstanciation</a> 
	;


<a name="listInstanciation">listInstanciation</a>
	:	<a href="BEventParser.html#paramRenameValuation">paramRenameValuation</a> ( B_COMMA <a href="BEventParser.html#paramRenameValuation">paramRenameValuation</a> )* 
	;


<a name="listNames">listNames</a>
	:	<a href="BEventParser.html#nameRenamedWithSave">nameRenamedWithSave</a> ( B_COMMA <a href="BEventParser.html#nameRenamedWithSave">nameRenamedWithSave</a> )* 
	;


<a name="nameRenamedWithSave">nameRenamedWithSave</a>
	:	B_IDENTIFIER ( B_POINT <a href="BEventParser.html#nameRenamedWithSave">nameRenamedWithSave</a> ) 
	|	B_IDENTIFIER 
	;


<a name="listParamNames">listParamNames</a>
	:	<a href="BEventParser.html#paramName">paramName</a> ( B_COMMA <a href="BEventParser.html#paramName">paramName</a> )* 
	;


<a name="paramRenameValuation">paramRenameValuation</a>
	:	<a href="BEventParser.html#nameRenamedWithSave">nameRenamedWithSave</a> ( B_LPAREN <a href="BEventParser.html#list_New_Predicate">list_New_Predicate</a> B_RPAREN )* 
	;


<a name="list_New_Predicate">list_New_Predicate</a>
	:	<a href="BEventParser.html#new_predicate">new_predicate</a> ( B_COMMA <a href="BEventParser.html#new_predicate">new_predicate</a> )* 
	;


<a name="sets_declaration">sets_declaration</a>
	:	<a href="BEventParser.html#set_declaration">set_declaration</a> ( B_SEMICOLON <a href="BEventParser.html#set_declaration">set_declaration</a> )* 
	;


<a name="set_declaration">set_declaration</a>
	:	B_IDENTIFIER 
		(	B_EQUAL <a href="BEventParser.html#set_construction">set_construction</a> 
		|	
		) 
	;


<a name="set_construction">set_construction</a>
	:	<a href="BEventParser.html#valuation_set">valuation_set</a> ( (	B_MULT 
			|	B_ADD 
			|	B_MINUS 
			) 
			<a href="BEventParser.html#valuation_set">valuation_set</a> )* 
	;


<a name="valuation_set">valuation_set</a>
	:	B_CURLYOPEN <a href="BEventParser.html#list_couple">list_couple</a> B_CURLYCLOSE 
	|	<a href="BEventParser.html#is_record">is_record</a> 
	|	<a href="BEventParser.html#basic_sets">basic_sets</a> 
	|	B_IDENTIFIER 
	;


<a name="list_couple">list_couple</a>
	:	<a href="BEventParser.html#couple_parent">couple_parent</a> ( B_COMMA <a href="BEventParser.html#couple_parent">couple_parent</a> )* 
	;


<a name="is_record">is_record</a>
	:	<a href="BEventParser.html#is_rec">is_rec</a> 
	|	<a href="BEventParser.html#is_struct">is_struct</a> 
	;


<a name="basic_sets">basic_sets</a>
	:	&quot;INT&quot; 
	|	&quot;INT1&quot; 
	|	&quot;INTEGER&quot; 
	|	&quot;INTEGER1&quot; 
	|	&quot;BOOL&quot; 
	|	&quot;NAT&quot; 
	|	&quot;NAT1&quot; 
	|	&quot;NATURAL&quot; 
	|	&quot;NATURAL1&quot; 
	|	&quot;STRING&quot; 
	;


<a name="couple_parent">couple_parent</a>
	:	B_LPAREN <a href="BEventParser.html#extended_couple">extended_couple</a> B_RPAREN 
	|	<a href="BEventParser.html#couple">couple</a> 
	;


<a name="extended_couple">extended_couple</a>
	:	<a href="BEventParser.html#a_set_value">a_set_value</a> ( (	B_MAPLET 
			|	B_COMMA 
			) 
			<a href="BEventParser.html#a_set_value">a_set_value</a> )* 
	;


<a name="couple">couple</a>
	:	<a href="BEventParser.html#a_set_value">a_set_value</a> ( B_MAPLET <a href="BEventParser.html#a_set_value">a_set_value</a> )* 
	;


<a name="a_set_value">a_set_value</a>
	:	B_IDENTIFIER 
	|	B_MINUS B_NUMBER 
	|	B_NUMBER 
	|	&quot;TRUE&quot; 
	|	&quot;FALSE&quot; 
	;


<a name="list_valuation">list_valuation</a>
	:	<a href="BEventParser.html#set_valuation">set_valuation</a> ( B_SEMICOLON <a href="BEventParser.html#set_valuation">set_valuation</a> )* 
	;


<a name="set_valuation">set_valuation</a>
	:	B_IDENTIFIER B_EQUAL <a href="BEventParser.html#new_set_or_constant_valuation">new_set_or_constant_valuation</a> 
	;


<a name="new_set_or_constant_valuation">new_set_or_constant_valuation</a>
	:	<a href="BEventParser.html#basic_sets">basic_sets</a> 
	|	B_CURLYOPEN <a href="BEventParser.html#list_couple">list_couple</a> B_CURLYCLOSE 
	|	<a href="BEventParser.html#bases">bases</a> B_MULT <a href="BEventParser.html#bases">bases</a> 
	|	<a href="BEventParser.html#basic_value">basic_value</a> 
		(	B_RANGE <a href="BEventParser.html#basic_value">basic_value</a> 
		|	
		) 
	;


<a name="bases">bases</a>
	:	<a href="BEventParser.html#basic_sets">basic_sets</a> 
	|	<a href="BEventParser.html#basic_value">basic_value</a> 
		(	B_RANGE <a href="BEventParser.html#arithmetic_0">arithmetic_0</a> 
		|	
		) 
	|	B_SEQEMPTY 
	|	B_BRACKOPEN <a href="BEventParser.html#listPredicate">listPredicate</a> B_BRACKCLOSE 
	|	B_LESS <a href="BEventParser.html#listPredicate">listPredicate</a> B_GREATER 
	|	B_EMPTYSET 
	|	B_CURLYOPEN <a href="BEventParser.html#value_set">value_set</a> B_CURLYCLOSE 
	|	<a href="BEventParser.html#quantification">quantification</a> 
	|	<a href="BEventParser.html#q_lambda">q_lambda</a> 
	;


<a name="basic_value">basic_value</a>
	:	B_ADD <a href="BEventParser.html#unary_basic_value_inverted">unary_basic_value_inverted</a> 
	|	B_MINUS <a href="BEventParser.html#unary_basic_value_inverted">unary_basic_value_inverted</a> 
	|	<a href="BEventParser.html#unary_basic_value_inverted">unary_basic_value_inverted</a> 
	|	B_ASTRING 
	|	<a href="BEventParser.html#is_record">is_record</a> 
	|	&quot;TRUE&quot; 
	|	&quot;FALSE&quot; 
	;


<a name="set_interval_value">set_interval_value</a>
	:	B_IDENTIFIER B_EQUAL <a href="BEventParser.html#interval_declaration">interval_declaration</a> 
	;


<a name="interval_declaration">interval_declaration</a>
	:	<a href="BEventParser.html#basic_value">basic_value</a> B_RANGE <a href="BEventParser.html#basic_value">basic_value</a> 
	;


<a name="set_rename_value">set_rename_value</a>
	:	B_IDENTIFIER B_EQUAL B_IDENTIFIER 
	;


<a name="definitions_mch_bis">definitions_mch_bis</a>
	:	&quot;DEFINITIONS&quot; <a href="BEventParser.html#list_def_mch">list_def_mch</a> 
	;


<a name="list_def_mch">list_def_mch</a>
	:	<a href="BEventParser.html#definition_mch">definition_mch</a> ( B_SEMICOLON <a href="BEventParser.html#definition_mch">definition_mch</a> )* 
	;


<a name="definitions_mch">definitions_mch</a>
	:	&quot;DEFINITIONS&quot; <a href="BEventParser.html#list_def_mch">list_def_mch</a> 
	;


<a name="definition_mch">definition_mch</a>
	:	<a href="BEventParser.html#paramName">paramName</a> B_DOUBLE_EQUAL <a href="BEventParser.html#formalText_mch">formalText_mch</a> 
	|	B_ASTRING 
	;


<a name="formalText_mch">formalText_mch</a>
	:	<a href="BEventParser.html#expression">expression</a> 
	|	<a href="BEventParser.html#substitution_mch">substitution_mch</a> 
	;


<a name="definitions_ref_bis">definitions_ref_bis</a>
	:	&quot;DEFINITIONS&quot; <a href="BEventParser.html#list_def_ref">list_def_ref</a> 
	;


<a name="list_def_ref">list_def_ref</a>
	:	<a href="BEventParser.html#definition_ref">definition_ref</a> ( B_SEMICOLON <a href="BEventParser.html#definition_ref">definition_ref</a> )* 
	;


<a name="definitions_ref">definitions_ref</a>
	:	&quot;DEFINITIONS&quot; <a href="BEventParser.html#list_def_ref">list_def_ref</a> 
	;


<a name="definition_ref">definition_ref</a>
	:	<a href="BEventParser.html#paramName">paramName</a> B_DOUBLE_EQUAL <a href="BEventParser.html#formalText_ref">formalText_ref</a> 
	|	B_ASTRING 
	;


<a name="formalText_ref">formalText_ref</a>
	:	<a href="BEventParser.html#expression">expression</a> 
	|	<a href="BEventParser.html#substitution_ref">substitution_ref</a> 
	;


<a name="substitution_ref">substitution_ref</a>
	:	<a href="BEventParser.html#subst_ref">subst_ref</a> 
	;


<a name="definitions_imp_bis">definitions_imp_bis</a>
	:	&quot;DEFINITIONS&quot; <a href="BEventParser.html#list_def_imp">list_def_imp</a> 
	;


<a name="list_def_imp">list_def_imp</a>
	:	<a href="BEventParser.html#definition_imp">definition_imp</a> ( B_SEMICOLON <a href="BEventParser.html#definition_imp">definition_imp</a> )* 
	;


<a name="definition_imp">definition_imp</a>
	:	<a href="BEventParser.html#paramName">paramName</a> B_DOUBLE_EQUAL <a href="BEventParser.html#formalText_imp">formalText_imp</a> 
	|	B_ASTRING 
	;


<a name="formalText_imp">formalText_imp</a>
	:	<a href="BEventParser.html#expression">expression</a> 
	|	<a href="BEventParser.html#substitution_imp">substitution_imp</a> 
	;


<a name="substitution_imp">substitution_imp</a>
	:	<a href="BEventParser.html#subst_imp">subst_imp</a> 
	;


<a name="list_assertions">list_assertions</a>
	:	<a href="BEventParser.html#expression">expression</a> ( B_SEMICOLON <a href="BEventParser.html#expression">expression</a> )* 
	;


<a name="sequential">sequential</a>
	:	<a href="BEventParser.html#subst_imp">subst_imp</a> ( B_SEMICOLON <a href="BEventParser.html#subst_imp">subst_imp</a> )* 
	;


<a name="operations_mch">operations_mch</a>
	:	&quot;OPERATIONS&quot; <a href="BEventParser.html#listOperationMch">listOperationMch</a> 
	;


<a name="listOperationMch">listOperationMch</a>
	:	<a href="BEventParser.html#operationMch">operationMch</a> ( B_SEMICOLON <a href="BEventParser.html#operationMch">operationMch</a> )* 
	;


<a name="operationMch">operationMch</a>
	:	<a href="BEventParser.html#operationHeader">operationHeader</a> B_EQUAL <a href="BEventParser.html#substitution_mch">substitution_mch</a> 
	;


<a name="operationHeader">operationHeader</a>
	:	<a href="BEventParser.html#paramName">paramName</a> 
	|	<a href="BEventParser.html#listIdentifier">listIdentifier</a> B_OUT <a href="BEventParser.html#paramName">paramName</a> 
	;


<a name="operations_ref">operations_ref</a>
	:	&quot;OPERATIONS&quot; <a href="BEventParser.html#listOperationRef">listOperationRef</a> 
	;


<a name="listOperationRef">listOperationRef</a>
	:	<a href="BEventParser.html#operationRef">operationRef</a> ( B_SEMICOLON <a href="BEventParser.html#operationRef">operationRef</a> )* 
	;


<a name="operationRef">operationRef</a>
	:	<a href="BEventParser.html#operationHeader">operationHeader</a> B_EQUAL <a href="BEventParser.html#substitution_ref">substitution_ref</a> 
	;


<a name="listOperationImp">listOperationImp</a>
	:	<a href="BEventParser.html#operationImp">operationImp</a> ( B_SEMICOLON <a href="BEventParser.html#operationImp">operationImp</a> )* 
	;


<a name="operationImp">operationImp</a>
	:	<a href="BEventParser.html#operationHeader">operationHeader</a> B_EQUAL <a href="BEventParser.html#substitution_imp">substitution_imp</a> 
	;


<a name="parallele_mch">parallele_mch</a>
	:	<a href="BEventParser.html#subst_mch">subst_mch</a> ( B_PARALLEL <a href="BEventParser.html#subst_mch">subst_mch</a> )* 
	;


<a name="subst_mch">subst_mch</a>
	:	<a href="BEventParser.html#identite">identite</a> 
	|	<a href="BEventParser.html#substitution_block_mch">substitution_block_mch</a> 
	|	<a href="BEventParser.html#substitution_precondition_mch">substitution_precondition_mch</a> 
	|	<a href="BEventParser.html#assert_mch">assert_mch</a> 
	|	<a href="BEventParser.html#anif_mch">anif_mch</a> 
	|	<a href="BEventParser.html#choice_mch">choice_mch</a> 
	|	<a href="BEventParser.html#substitution_unbounded_choice_mch">substitution_unbounded_choice_mch</a> 
	|	<a href="BEventParser.html#substitution_selection_mch">substitution_selection_mch</a> 
	|	<a href="BEventParser.html#let_mch">let_mch</a> 
	|	<a href="BEventParser.html#case_mch">case_mch</a> 
	|	<a href="BEventParser.html#simple_affect_ref">simple_affect_ref</a> 
	;


<a name="identite">identite</a>
	:	&quot;skip&quot; 
	;


<a name="assert_mch">assert_mch</a>
	:	&quot;ASSERT&quot; <a href="BEventParser.html#expression">expression</a> &quot;THEN&quot; <a href="BEventParser.html#substitution_mch">substitution_mch</a> &quot;END&quot; 
	;


<a name="anif_mch">anif_mch</a>
	:	&quot;IF&quot; <a href="BEventParser.html#expression">expression</a> <a href="BEventParser.html#then_branch_mch">then_branch_mch</a> ( <a href="BEventParser.html#elsif_branch_mch">elsif_branch_mch</a> )* 
		(	<a href="BEventParser.html#e_branch_mch">e_branch_mch</a> 
		|	
		) 
		&quot;END&quot; 
	;


<a name="choice_mch">choice_mch</a>
	:	&quot;CHOICE&quot; <a href="BEventParser.html#list_or_mch">list_or_mch</a> &quot;END&quot; 
	;


<a name="let_mch">let_mch</a>
	:	&quot;LET&quot; <a href="BEventParser.html#list_identifier">list_identifier</a> &quot;BE&quot; <a href="BEventParser.html#list_equal">list_equal</a> &quot;IN&quot; <a href="BEventParser.html#substitution_mch">substitution_mch</a> &quot;END&quot; 
	;


<a name="case_mch">case_mch</a>
	:	&quot;CASE&quot; <a href="BEventParser.html#predicate">predicate</a> &quot;OF&quot; <a href="BEventParser.html#branche_either_mch">branche_either_mch</a> ( <a href="BEventParser.html#branche_or_mch">branche_or_mch</a> )* 
		(	<a href="BEventParser.html#branche_else_mch">branche_else_mch</a> 
		|	
		) 
		&quot;END&quot; &quot;END&quot; 
	;


<a name="simple_affect_ref">simple_affect_ref</a>
	:	<a href="BEventParser.html#list_func_call">list_func_call</a> B_SIMPLESUBST <a href="BEventParser.html#predicate">predicate</a> 
	|	<a href="BEventParser.html#list_func_call">list_func_call</a> B_OUT <a href="BEventParser.html#func_call">func_call</a> 
	|	<a href="BEventParser.html#list_func_call">list_func_call</a> B_INSET B_LPAREN <a href="BEventParser.html#expression">expression</a> B_RPAREN 
	|	<a href="BEventParser.html#list_func_call">list_func_call</a> B_BECOME_ELEM <a href="BEventParser.html#expression">expression</a> 
	|	<a href="BEventParser.html#a_func_call_quoted">a_func_call_quoted</a> 
	;


<a name="subst_ref">subst_ref</a>
	:	<a href="BEventParser.html#identite">identite</a> 
	|	<a href="BEventParser.html#substitution_block_ref">substitution_block_ref</a> 
	|	<a href="BEventParser.html#substitution_precondition_ref">substitution_precondition_ref</a> 
	|	<a href="BEventParser.html#assert_ref">assert_ref</a> 
	|	<a href="BEventParser.html#anif_ref">anif_ref</a> 
	|	<a href="BEventParser.html#choice_ref">choice_ref</a> 
	|	<a href="BEventParser.html#substitution_unbounded_choice_ref">substitution_unbounded_choice_ref</a> 
	|	<a href="BEventParser.html#substitution_selection_ref">substitution_selection_ref</a> 
	|	<a href="BEventParser.html#case_ref">case_ref</a> 
	|	<a href="BEventParser.html#let_ref">let_ref</a> 
	|	<a href="BEventParser.html#simple_affect_ref">simple_affect_ref</a> 
	|	<a href="BEventParser.html#var_ref">var_ref</a> 
	;


<a name="assert_ref">assert_ref</a>
	:	&quot;ASSERT&quot; <a href="BEventParser.html#expression">expression</a> &quot;THEN&quot; <a href="BEventParser.html#parallele_ref">parallele_ref</a> &quot;END&quot; 
	;


<a name="anif_ref">anif_ref</a>
	:	&quot;IF&quot; <a href="BEventParser.html#expression">expression</a> <a href="BEventParser.html#then_branch_ref">then_branch_ref</a> ( <a href="BEventParser.html#elsif_branch_ref">elsif_branch_ref</a> )* 
		(	<a href="BEventParser.html#e_branch_ref">e_branch_ref</a> 
		|	
		) 
		&quot;END&quot; 
	;


<a name="choice_ref">choice_ref</a>
	:	&quot;CHOICE&quot; <a href="BEventParser.html#list_or_ref">list_or_ref</a> &quot;END&quot; 
	;


<a name="case_ref">case_ref</a>
	:	&quot;CASE&quot; <a href="BEventParser.html#predicate">predicate</a> &quot;OF&quot; <a href="BEventParser.html#branche_either_ref">branche_either_ref</a> ( <a href="BEventParser.html#branche_or_ref">branche_or_ref</a> )* 
		(	<a href="BEventParser.html#branche_else_ref">branche_else_ref</a> 
		|	
		) 
		&quot;END&quot; &quot;END&quot; 
	;


<a name="let_ref">let_ref</a>
	:	&quot;LET&quot; <a href="BEventParser.html#list_identifier">list_identifier</a> &quot;BE&quot; <a href="BEventParser.html#list_equal">list_equal</a> &quot;IN&quot; <a href="BEventParser.html#parallele_ref">parallele_ref</a> &quot;END&quot; 
	;


<a name="var_ref">var_ref</a>
	:	&quot;VAR&quot; <a href="BEventParser.html#listIdentifier">listIdentifier</a> &quot;IN&quot; <a href="BEventParser.html#parallele_ref">parallele_ref</a> &quot;END&quot; 
	;


<a name="subst_imp">subst_imp</a>
	:	<a href="BEventParser.html#identite">identite</a> 
	|	<a href="BEventParser.html#substitution_block_imp">substitution_block_imp</a> 
	|	<a href="BEventParser.html#assert_imp">assert_imp</a> 
	|	<a href="BEventParser.html#anif_imp">anif_imp</a> 
	|	<a href="BEventParser.html#case_imp">case_imp</a> 
	|	<a href="BEventParser.html#var_imp">var_imp</a> 
	|	<a href="BEventParser.html#while_loop">while_loop</a> 
	|	<a href="BEventParser.html#simple_affect">simple_affect</a> 
	;


<a name="substitution_block_imp">substitution_block_imp</a>
	:	&quot;BEGIN&quot; <a href="BEventParser.html#sequential">sequential</a> &quot;END&quot; 
	;


<a name="assert_imp">assert_imp</a>
	:	&quot;ASSERT&quot; <a href="BEventParser.html#expression">expression</a> &quot;THEN&quot; <a href="BEventParser.html#sequential">sequential</a> &quot;END&quot; 
	;


<a name="anif_imp">anif_imp</a>
	:	&quot;IF&quot; <a href="BEventParser.html#expression">expression</a> <a href="BEventParser.html#then_branch_imp">then_branch_imp</a> ( <a href="BEventParser.html#elsif_branch_imp">elsif_branch_imp</a> )* 
		(	<a href="BEventParser.html#e_branch_imp">e_branch_imp</a> 
		|	
		) 
		&quot;END&quot; 
	;


<a name="case_imp">case_imp</a>
	:	&quot;CASE&quot; <a href="BEventParser.html#predicate">predicate</a> &quot;OF&quot; <a href="BEventParser.html#branche_either_imp">branche_either_imp</a> ( <a href="BEventParser.html#branche_or_imp">branche_or_imp</a> )* 
		(	<a href="BEventParser.html#branche_else_imp">branche_else_imp</a> 
		|	
		) 
		&quot;END&quot; &quot;END&quot; 
	;


<a name="var_imp">var_imp</a>
	:	&quot;VAR&quot; <a href="BEventParser.html#listIdentifier">listIdentifier</a> &quot;IN&quot; <a href="BEventParser.html#sequential">sequential</a> &quot;END&quot; 
	;


<a name="while_loop">while_loop</a>
	:	&quot;WHILE&quot; <a href="BEventParser.html#predicate">predicate</a> &quot;DO&quot; <a href="BEventParser.html#sequential">sequential</a> <a href="BEventParser.html#variant_or_no">variant_or_no</a> &quot;END&quot; 
	;


<a name="simple_affect">simple_affect</a>
	:	<a href="BEventParser.html#list_func_call">list_func_call</a> B_SIMPLESUBST <a href="BEventParser.html#predicate">predicate</a> 
	|	<a href="BEventParser.html#list_func_call">list_func_call</a> B_OUT <a href="BEventParser.html#func_call">func_call</a> 
	|	<a href="BEventParser.html#a_func_call_quoted">a_func_call_quoted</a> 
	;


<a name="then_branch_mch">then_branch_mch</a>
	:	&quot;THEN&quot; <a href="BEventParser.html#substitution_mch">substitution_mch</a> 
	;


<a name="elsif_branch_mch">elsif_branch_mch</a>
	:	&quot;ELSIF&quot; <a href="BEventParser.html#expression">expression</a> &quot;THEN&quot; <a href="BEventParser.html#substitution_mch">substitution_mch</a> 
	;


<a name="e_branch_mch">e_branch_mch</a>
	:	&quot;ELSE&quot; <a href="BEventParser.html#substitution_mch">substitution_mch</a> 
	;


<a name="then_branch_ref">then_branch_ref</a>
	:	&quot;THEN&quot; <a href="BEventParser.html#parallele_ref">parallele_ref</a> 
	;


<a name="elsif_branch_ref">elsif_branch_ref</a>
	:	&quot;ELSIF&quot; <a href="BEventParser.html#expression">expression</a> &quot;THEN&quot; <a href="BEventParser.html#parallele_ref">parallele_ref</a> 
	;


<a name="e_branch_ref">e_branch_ref</a>
	:	&quot;ELSE&quot; <a href="BEventParser.html#parallele_ref">parallele_ref</a> 
	;


<a name="then_branch_imp">then_branch_imp</a>
	:	&quot;THEN&quot; <a href="BEventParser.html#sequential">sequential</a> 
	;


<a name="elsif_branch_imp">elsif_branch_imp</a>
	:	&quot;ELSIF&quot; <a href="BEventParser.html#expression">expression</a> &quot;THEN&quot; <a href="BEventParser.html#sequential">sequential</a> 
	;


<a name="e_branch_imp">e_branch_imp</a>
	:	&quot;ELSE&quot; <a href="BEventParser.html#sequential">sequential</a> 
	;


<a name="list_or_mch">list_or_mch</a>
	:	<a href="BEventParser.html#substitution_mch">substitution_mch</a> ( &quot;OR&quot; <a href="BEventParser.html#substitution_mch">substitution_mch</a> )* 
	;


<a name="list_or_ref">list_or_ref</a>
	:	<a href="BEventParser.html#parallele_ref">parallele_ref</a> ( &quot;OR&quot; <a href="BEventParser.html#parallele_ref">parallele_ref</a> )* 
	;


<a name="branche_either_mch">branche_either_mch</a>
	:	&quot;EITHER&quot; <a href="BEventParser.html#predicate">predicate</a> &quot;THEN&quot; <a href="BEventParser.html#substitution_mch">substitution_mch</a> 
	;


<a name="branche_or_mch">branche_or_mch</a>
	:	&quot;OR&quot; <a href="BEventParser.html#predicate">predicate</a> &quot;THEN&quot; <a href="BEventParser.html#substitution_mch">substitution_mch</a> 
	;


<a name="branche_else_mch">branche_else_mch</a>
	:	&quot;ELSE&quot; <a href="BEventParser.html#substitution_mch">substitution_mch</a> 
	;


<a name="branche_either_ref">branche_either_ref</a>
	:	&quot;EITHER&quot; <a href="BEventParser.html#predicate">predicate</a> &quot;THEN&quot; <a href="BEventParser.html#parallele_ref">parallele_ref</a> 
	;


<a name="branche_or_ref">branche_or_ref</a>
	:	&quot;OR&quot; <a href="BEventParser.html#predicate">predicate</a> &quot;THEN&quot; <a href="BEventParser.html#parallele_ref">parallele_ref</a> 
	;


<a name="branche_else_ref">branche_else_ref</a>
	:	&quot;ELSE&quot; <a href="BEventParser.html#parallele_ref">parallele_ref</a> 
	;


<a name="branche_either_imp">branche_either_imp</a>
	:	&quot;EITHER&quot; <a href="BEventParser.html#predicate">predicate</a> &quot;THEN&quot; <a href="BEventParser.html#sequential">sequential</a> 
	;


<a name="branche_or_imp">branche_or_imp</a>
	:	&quot;OR&quot; <a href="BEventParser.html#predicate">predicate</a> &quot;THEN&quot; <a href="BEventParser.html#sequential">sequential</a> 
	;


<a name="branche_else_imp">branche_else_imp</a>
	:	&quot;ELSE&quot; <a href="BEventParser.html#sequential">sequential</a> 
	;


<a name="when_branch_mch">when_branch_mch</a>
	:	&quot;WHEN&quot; <a href="BEventParser.html#expression">expression</a> &quot;THEN&quot; <a href="BEventParser.html#substitution_mch">substitution_mch</a> 
	;


<a name="when_branch_ref">when_branch_ref</a>
	:	&quot;WHEN&quot; <a href="BEventParser.html#expression">expression</a> &quot;THEN&quot; <a href="BEventParser.html#parallele_ref">parallele_ref</a> 
	;


<a name="list_identifier">list_identifier</a>
	:	B_IDENTIFIER ( B_COMMA B_IDENTIFIER )* 
	;


<a name="list_equal">list_equal</a>
	:	<a href="BEventParser.html#an_equal">an_equal</a> ( B_AND <a href="BEventParser.html#an_equal">an_equal</a> )* 
	;


<a name="variant_or_no">variant_or_no</a>
	:	&quot;VARIANT&quot; <a href="BEventParser.html#predicate">predicate</a> &quot;INVARIANT&quot; <a href="BEventParser.html#expression">expression</a> 
	|	&quot;INVARIANT&quot; <a href="BEventParser.html#expression">expression</a> &quot;VARIANT&quot; <a href="BEventParser.html#predicate">predicate</a> 
	;


<a name="an_equal">an_equal</a>
	:	B_IDENTIFIER B_EQUAL <a href="BEventParser.html#predicate">predicate</a> 
	;


<a name="func_call">func_call</a>
	:	<a href="BEventParser.html#nameRenameDecoratedInvertedParamInverted">nameRenameDecoratedInvertedParamInverted</a> 
		(	B_BRACKOPEN <a href="BEventParser.html#expression">expression</a> B_BRACKCLOSE 
		|	
		) 
	;


<a name="nameRenameDecoratedInvertedParamInverted">nameRenameDecoratedInvertedParamInverted</a>
	:	<a href="BEventParser.html#nameRenameDecoratedInvertedParam">nameRenameDecoratedInvertedParam</a> 
		(	B_TILDE 
		|	
		) 
	;


<a name="nameRenameDecoratedInvertedParam">nameRenameDecoratedInvertedParam</a>
	:	<a href="BEventParser.html#nameRenameDecoratedInverted">nameRenameDecoratedInverted</a> ( B_LPAREN <a href="BEventParser.html#list_New_Predicate">list_New_Predicate</a> B_RPAREN )* 
	;


<a name="nameRenameDecoratedInverted">nameRenameDecoratedInverted</a>
	:	<a href="BEventParser.html#nameRenamedDecorated">nameRenamedDecorated</a> 
		(	B_TILDE 
		|	
		) 
	;


<a name="nameRenamedDecorated">nameRenamedDecorated</a>
	:	<a href="BEventParser.html#nameRenamed">nameRenamed</a> 
		(	B_CPRED 
		|	
		) 
	;


<a name="applyto">applyto</a>
	:	B_BRACKOPEN <a href="BEventParser.html#predicate">predicate</a> B_BRACKCLOSE 
	;


<a name="a_func_call_quoted">a_func_call_quoted</a>
	:	<a href="BEventParser.html#a_func_call">a_func_call</a> ( B_QUOTEIDENT <a href="BEventParser.html#a_func_call">a_func_call</a> )* 
	;


<a name="a_func_call">a_func_call</a>
	:	<a href="BEventParser.html#nameRenamed">nameRenamed</a> ( B_LPAREN <a href="BEventParser.html#listPredicate">listPredicate</a> B_RPAREN )* 
	;


<a name="listPredicate">listPredicate</a>
	:	<a href="BEventParser.html#predicate">predicate</a> ( B_COMMA <a href="BEventParser.html#predicate">predicate</a> )* 
	;


<a name="list_func_call">list_func_call</a>
	:	<a href="BEventParser.html#a_func_call_quoted">a_func_call_quoted</a> ( B_COMMA <a href="BEventParser.html#a_func_call_quoted">a_func_call_quoted</a> )* 
	;


<a name="analyse_expression">analyse_expression</a>
	:	<a href="BEventParser.html#expression">expression</a> 
	|	
	;


<a name="analyse_predicate">analyse_predicate</a>
	:	<a href="BEventParser.html#predicate">predicate</a> 
	|	
	;


<a name="logical_1">logical_1</a>
	:	<a href="BEventParser.html#logical_2">logical_2</a> ( (	&quot;or&quot; 
			|	B_AND 
			) 
			<a href="BEventParser.html#logical_2">logical_2</a> )* 
	;


<a name="logical_2">logical_2</a>
	:	<a href="BEventParser.html#subset_description">subset_description</a> ( (	B_EQUIV 
			|	B_EQUAL 
			) 
			<a href="BEventParser.html#subset_description">subset_description</a> )* 
	;


<a name="subset_description">subset_description</a>
	:	( <a href="BEventParser.html#extended_pair">extended_pair</a> ( (	B_SUBSET 
				|	B_NOTSUBSET 
				|	B_STRICTSUBSET 
				|	B_NOTSTRICTSBSET 
				|	B_INSET 
				) 
				<a href="BEventParser.html#arithmetic_3">arithmetic_3</a> ) ) 
	|	<a href="BEventParser.html#arithmetic_3">arithmetic_3</a> 
	;


<a name="extended_pair">extended_pair</a>
	:	<a href="BEventParser.html#arithmetic_3">arithmetic_3</a> ( B_COMMA <a href="BEventParser.html#arithmetic_3">arithmetic_3</a> )* 
	;


<a name="arithmetic_3">arithmetic_3</a>
	:	<a href="BEventParser.html#sequence_description">sequence_description</a> ( (	B_NOTINSET 
			|	B_LESS 
			|	B_GREATER 
			|	B_NOTEQUAL 
			|	B_LESSTHANEQUAL 
			|	B_GREATERTHANEQUAL 
			) 
			<a href="BEventParser.html#sequence_description">sequence_description</a> )* 
	;


<a name="sequence_description">sequence_description</a>
	:	<a href="BEventParser.html#set_description">set_description</a> ( (	B_CONCATSEQ 
			|	B_PREAPPSEQ 
			|	B_APPSEQ 
			|	B_PREFIXSEQ 
			|	B_SUFFIXSEQ 
			) 
			<a href="BEventParser.html#set_description">set_description</a> )* 
	;


<a name="set_description">set_description</a>
	:	&quot;bool&quot; B_LPAREN <a href="BEventParser.html#expression">expression</a> B_RPAREN 
	|	<a href="BEventParser.html#functional_set">functional_set</a> 
	;


<a name="functional_set">functional_set</a>
	:	<a href="BEventParser.html#functional_const_set">functional_const_set</a> ( (	B_RELATION 
			|	B_PARTIAL 
			|	B_TOTAL 
			|	B_PARTIAL_INJECT 
			|	B_TOTAL_INJECT 
			|	B_PARTIAL_SURJECT 
			|	B_TOTAL_SURJECT 
			|	B_BIJECTION 
			) 
			<a href="BEventParser.html#functional_const_set">functional_const_set</a> )* 
	;


<a name="functional_const_set">functional_const_set</a>
	:	<a href="BEventParser.html#basic_constructors">basic_constructors</a> ( (	B_DOMAINRESTRICT 
			|	B_RANGERESTRICT 
			|	B_DOMAINSUBSTRACT 
			|	B_RANGESUBSTRACT 
			|	B_OVERRIDEFORWARD 
			|	B_OVERRIDEBACKWARD 
			|	B_RELPROD 
			) 
			<a href="BEventParser.html#basic_constructors">basic_constructors</a> )* 
	;


<a name="basic_constructors">basic_constructors</a>
	:	<a href="BEventParser.html#new_couple">new_couple</a> ( (	B_UNION 
			|	B_INTER 
			) 
			<a href="BEventParser.html#new_couple">new_couple</a> )* 
	;


<a name="new_couple">new_couple</a>
	:	<a href="BEventParser.html#arithmetic_0">arithmetic_0</a> ( B_MAPLET <a href="BEventParser.html#arithmetic_0">arithmetic_0</a> )* 
	;


<a name="arithmetic_0">arithmetic_0</a>
	:	<a href="BEventParser.html#arithmetic_1">arithmetic_1</a> ( (	B_POWER 
			|	B_MULT 
			) 
			<a href="BEventParser.html#arithmetic_1">arithmetic_1</a> )* 
	;


<a name="arithmetic_1">arithmetic_1</a>
	:	<a href="BEventParser.html#arithmetic_2">arithmetic_2</a> ( (	B_DIV 
			|	&quot;mod&quot; 
			) 
			<a href="BEventParser.html#arithmetic_2">arithmetic_2</a> )* 
	;


<a name="arithmetic_2">arithmetic_2</a>
	:	<a href="BEventParser.html#bases">bases</a> ( (	B_ADD 
			|	B_MINUS 
			) 
			<a href="BEventParser.html#bases">bases</a> )* 
	;


<a name="value_set">value_set</a>
	:	<a href="BEventParser.html#alist_var">alist_var</a> ( B_SUCH <a href="BEventParser.html#expression">expression</a> ) 
	|	<a href="BEventParser.html#listPredicate">listPredicate</a> 
	;


<a name="quantification">quantification</a>
	:	(	B_FORALL 
		|	B_EXISTS 
		) 
		(	( B_LPAREN <a href="BEventParser.html#q_quantification">q_quantification</a> B_RPAREN ) 
		|	( <a href="BEventParser.html#q_quantification">q_quantification</a> ) 
		|	( B_LPAREN <a href="BEventParser.html#q_quantification">q_quantification</a> B_RPAREN ) 
		|	( B_LPAREN <a href="BEventParser.html#q_quantification">q_quantification</a> B_RPAREN ) 
		|	( <a href="BEventParser.html#q_quantification">q_quantification</a> ) 
		|	( <a href="BEventParser.html#q_quantification">q_quantification</a> ) 
		) 
	;


<a name="q_lambda">q_lambda</a>
	:	(	B_LAMBDA 
		|	&quot;PI&quot; 
		|	&quot;SIGMA&quot; 
		|	&quot;UNION&quot; 
		|	&quot;INTER&quot; 
		) 
		(	( B_LPAREN <a href="BEventParser.html#q_operande">q_operande</a> B_RPAREN ) 
		|	( <a href="BEventParser.html#q_operande">q_operande</a> ) 
		|	( B_LPAREN <a href="BEventParser.html#q_operande">q_operande</a> B_RPAREN ) 
		|	( B_LPAREN <a href="BEventParser.html#q_operande">q_operande</a> B_RPAREN ) 
		|	( <a href="BEventParser.html#q_operande">q_operande</a> ) 
		|	( <a href="BEventParser.html#q_operande">q_operande</a> ) 
		) 
	;


<a name="alist_var">alist_var</a>
	:	B_LPAREN <a href="BEventParser.html#list_identifier">list_identifier</a> B_RPAREN 
	|	<a href="BEventParser.html#list_identifier">list_identifier</a> 
	;


<a name="unary_basic_value_inverted">unary_basic_value_inverted</a>
	:	<a href="BEventParser.html#unary_basic_value">unary_basic_value</a> 
		(	B_TILDE 
		|	
		) 
	;


<a name="unary_basic_value">unary_basic_value</a>
	:	<a href="BEventParser.html#expInvertedParamInvertedQuoted">expInvertedParamInvertedQuoted</a> 
		(	B_BRACKOPEN <a href="BEventParser.html#predicate">predicate</a> B_BRACKCLOSE 
		|	
		) 
	|	B_NUMBER 
	;


<a name="expInvertedParamInvertedQuoted">expInvertedParamInvertedQuoted</a>
	:	<a href="BEventParser.html#expInvertedParamInverted">expInvertedParamInverted</a> ( B_QUOTEIDENT <a href="BEventParser.html#expInvertedParamInverted">expInvertedParamInverted</a> )* 
	;


<a name="expInvertedParamInverted">expInvertedParamInverted</a>
	:	<a href="BEventParser.html#expInvertedParam">expInvertedParam</a> 
		(	B_TILDE 
		|	
		) 
	;


<a name="expInvertedParam">expInvertedParam</a>
	:	<a href="BEventParser.html#expParentInverted">expParentInverted</a> ( B_LPAREN <a href="BEventParser.html#list_New_Predicate">list_New_Predicate</a> B_RPAREN )* 
	;


<a name="expParentInverted">expParentInverted</a>
	:	(	&quot;ran&quot; 
		|	&quot;not&quot; 
		|	&quot;dom&quot; 
		|	&quot;min&quot; 
		|	&quot;max&quot; 
		|	&quot;card&quot; 
		|	
		) 
		<a href="BEventParser.html#expression_parent">expression_parent</a> 
		(	B_TILDE 
		|	
		) 
	;


<a name="expression_parent">expression_parent</a>
	:	B_LPAREN <a href="BEventParser.html#expression_func_composition">expression_func_composition</a> B_RPAREN 
	|	<a href="BEventParser.html#nameRenamedDecorated">nameRenamedDecorated</a> 
	;


<a name="expression_func_composition">expression_func_composition</a>
	:	<a href="BEventParser.html#expression">expression</a> ( (	B_SEMICOLON 
			|	B_PARALLEL 
			) 
			<a href="BEventParser.html#expression">expression</a> )* 
	;


protected <a name="plogical_1">plogical_1</a>
	:	<a href="BEventParser.html#plogical_2">plogical_2</a> ( (	&quot;or&quot; 
			|	B_AND 
			) 
			<a href="BEventParser.html#plogical_2">plogical_2</a> )* 
	;


protected <a name="plogical_2">plogical_2</a>
	:	<a href="BEventParser.html#psubset_description">psubset_description</a> ( (	B_EQUIV 
			|	B_EQUAL 
			) 
			<a href="BEventParser.html#psubset_description">psubset_description</a> )* 
	;


protected <a name="psubset_description">psubset_description</a>
	:	<a href="BEventParser.html#pextended_pair">pextended_pair</a> ( (	B_SUBSET 
			|	B_NOTSUBSET 
			|	B_STRICTSUBSET 
			|	B_NOTSTRICTSBSET 
			) 
			<a href="BEventParser.html#parithmetic_3">parithmetic_3</a> )* 
	;


protected <a name="pextended_pair">pextended_pair</a>
	:	<a href="BEventParser.html#parithmetic_3">parithmetic_3</a> ( B_COMMA <a href="BEventParser.html#parithmetic_3">parithmetic_3</a> )* 
	;


protected <a name="parithmetic_3">parithmetic_3</a>
	:	<a href="BEventParser.html#psequence_description">psequence_description</a> ( (	B_LESS 
			|	B_GREATER 
			|	B_NOTEQUAL 
			|	B_LESSTHANEQUAL 
			|	B_GREATERTHANEQUAL 
			) 
			<a href="BEventParser.html#psequence_description">psequence_description</a> )* 
	;


protected <a name="psequence_description">psequence_description</a>
	:	<a href="BEventParser.html#pset_description">pset_description</a> ( (	B_CONCATSEQ 
			|	B_PREAPPSEQ 
			|	B_APPSEQ 
			|	B_PREFIXSEQ 
			|	B_SUFFIXSEQ 
			) 
			<a href="BEventParser.html#pset_description">pset_description</a> )* 
	;


protected <a name="pset_description">pset_description</a>
	:	&quot;bool&quot; B_LPAREN <a href="BEventParser.html#expression">expression</a> B_RPAREN 
	|	<a href="BEventParser.html#pfunctional_set">pfunctional_set</a> 
	;


protected <a name="pfunctional_set">pfunctional_set</a>
	:	<a href="BEventParser.html#pfunctional_const_set">pfunctional_const_set</a> ( (	B_RELATION 
			|	B_PARTIAL 
			|	B_TOTAL 
			|	B_PARTIAL_INJECT 
			|	B_TOTAL_INJECT 
			|	B_PARTIAL_SURJECT 
			|	B_TOTAL_SURJECT 
			|	B_BIJECTION 
			) 
			<a href="BEventParser.html#pfunctional_const_set">pfunctional_const_set</a> )* 
	;


protected <a name="pfunctional_const_set">pfunctional_const_set</a>
	:	<a href="BEventParser.html#pset_constructors">pset_constructors</a> ( (	B_DOMAINRESTRICT 
			|	B_RANGERESTRICT 
			|	B_DOMAINSUBSTRACT 
			|	B_RANGESUBSTRACT 
			|	B_OVERRIDEFORWARD 
			|	B_OVERRIDEBACKWARD 
			|	B_RELPROD 
			) 
			<a href="BEventParser.html#pset_constructors">pset_constructors</a> )* 
	;


protected <a name="pset_constructors">pset_constructors</a>
	:	<a href="BEventParser.html#ppaire">ppaire</a> ( (	B_UNION 
			|	B_INTER 
			) 
			<a href="BEventParser.html#ppaire">ppaire</a> )* 
	;


protected <a name="ppaire">ppaire</a>
	:	<a href="BEventParser.html#parithmetic_0">parithmetic_0</a> ( B_MAPLET <a href="BEventParser.html#parithmetic_0">parithmetic_0</a> )* 
	;


protected <a name="parithmetic_0">parithmetic_0</a>
	:	<a href="BEventParser.html#parithmetic_1">parithmetic_1</a> ( (	B_POWER 
			|	B_MULT 
			) 
			<a href="BEventParser.html#parithmetic_1">parithmetic_1</a> )* 
	;


protected <a name="parithmetic_1">parithmetic_1</a>
	:	<a href="BEventParser.html#parithmetic_2">parithmetic_2</a> ( (	B_DIV 
			|	&quot;mod&quot; 
			) 
			<a href="BEventParser.html#parithmetic_2">parithmetic_2</a> )* 
	;


protected <a name="parithmetic_2">parithmetic_2</a>
	:	<a href="BEventParser.html#pbases">pbases</a> ( (	B_ADD 
			|	B_MINUS 
			) 
			<a href="BEventParser.html#pbases">pbases</a> )* 
	;


protected <a name="pbases">pbases</a>
	:	B_SEQEMPTY 
	|	B_BRACKOPEN <a href="BEventParser.html#listPredicate">listPredicate</a> B_BRACKCLOSE 
	|	B_LESS <a href="BEventParser.html#listPredicate">listPredicate</a> B_GREATER 
	|	<a href="BEventParser.html#basic_sets">basic_sets</a> 
	|	<a href="BEventParser.html#pbasic_value">pbasic_value</a> 
		(	B_RANGE <a href="BEventParser.html#parithmetic_0">parithmetic_0</a> 
		|	
		) 
	|	B_EMPTYSET 
	|	B_CURLYOPEN <a href="BEventParser.html#pvalue_set">pvalue_set</a> B_CURLYCLOSE 
	|	<a href="BEventParser.html#quantification">quantification</a> 
	|	<a href="BEventParser.html#q_lambda">q_lambda</a> 
	;


protected <a name="pbasic_value">pbasic_value</a>
	:	B_ADD <a href="BEventParser.html#punary_basic_value_inverted">punary_basic_value_inverted</a> 
	|	B_MINUS <a href="BEventParser.html#punary_basic_value_inverted">punary_basic_value_inverted</a> 
	|	<a href="BEventParser.html#punary_basic_value_inverted">punary_basic_value_inverted</a> 
	|	B_ASTRING 
	|	<a href="BEventParser.html#is_rec">is_rec</a> 
	|	&quot;TRUE&quot; 
	|	&quot;FALSE&quot; 
	;


protected <a name="pvalue_set">pvalue_set</a>
	:	<a href="BEventParser.html#alist_var">alist_var</a> B_SUCH <a href="BEventParser.html#expression">expression</a> 
	|	<a href="BEventParser.html#predicate">predicate</a> ( B_COMMA <a href="BEventParser.html#predicate">predicate</a> )* 
	;


protected <a name="punary_basic_value_inverted">punary_basic_value_inverted</a>
	:	<a href="BEventParser.html#punary_basic_value">punary_basic_value</a> 
		(	B_TILDE 
		|	
		) 
	;


<a name="is_rec">is_rec</a>
	:	&quot;rec&quot; B_LPAREN <a href="BEventParser.html#listRecord">listRecord</a> B_RPAREN 
	;


<a name="listRecord">listRecord</a>
	:	<a href="BEventParser.html#a_record">a_record</a> ( B_COMMA <a href="BEventParser.html#a_record">a_record</a> )* 
	;


protected <a name="punary_basic_value">punary_basic_value</a>
	:	<a href="BEventParser.html#predInvertedParamInvertedQuoted">predInvertedParamInvertedQuoted</a> 
		(	B_BRACKOPEN <a href="BEventParser.html#predicate">predicate</a> B_BRACKCLOSE 
		|	
		) 
	|	B_NUMBER 
	;


protected <a name="predInvertedParam">predInvertedParam</a>
	:	<a href="BEventParser.html#predParentInverted">predParentInverted</a> ( B_LPAREN <a href="BEventParser.html#list_New_Predicate">list_New_Predicate</a> B_RPAREN )* 
	;


protected <a name="predParentInverted">predParentInverted</a>
	:	(	&quot;ran&quot; 
		|	&quot;not&quot; 
		|	&quot;dom&quot; 
		|	&quot;min&quot; 
		|	&quot;max&quot; 
		|	&quot;card&quot; 
		|	
		) 
		<a href="BEventParser.html#pred_parent">pred_parent</a> 
		(	B_TILDE 
		|	
		) 
	;


<a name="pred_parent">pred_parent</a>
	:	B_LPAREN <a href="BEventParser.html#pred_func_composition">pred_func_composition</a> B_RPAREN 
	|	<a href="BEventParser.html#nameRenamedDecorated">nameRenamedDecorated</a> 
	;


<a name="pred_func_composition">pred_func_composition</a>
	:	<a href="BEventParser.html#predicate">predicate</a> ( (	B_SEMICOLON 
			|	B_PARALLEL 
			) 
			<a href="BEventParser.html#predicate">predicate</a> )* 
	;


<a name="q_quantification">q_quantification</a>
	:	<a href="BEventParser.html#alist_var">alist_var</a> B_POINT B_LPAREN <a href="BEventParser.html#expression">expression</a> B_RPAREN 
	;


<a name="q_operande">q_operande</a>
	:	<a href="BEventParser.html#alist_var">alist_var</a> B_POINT B_LPAREN <a href="BEventParser.html#expression">expression</a> B_SUCH <a href="BEventParser.html#expression">expression</a> B_RPAREN 
	;


<a name="is_struct">is_struct</a>
	:	&quot;struct&quot; B_LPAREN <a href="BEventParser.html#listRecord">listRecord</a> B_RPAREN 
	;


<a name="a_record">a_record</a>
	:	B_IDENTIFIER B_INSET <a href="BEventParser.html#pfunctional_set">pfunctional_set</a> 
	|	<a href="BEventParser.html#pfunctional_set">pfunctional_set</a> 
	|	<a href="BEventParser.html#is_struct">is_struct</a> 
	;


<a name="new_predicate">new_predicate</a>
	:	<a href="BEventParser.html#expression">expression</a> ( (	B_SEMICOLON 
			|	B_PARALLEL 
			) 
			<a href="BEventParser.html#predicate">predicate</a> )* 
	;

</PRE>
</BODY>
</HTML>
