<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<HTML>
<HEAD>
<TITLE>Grammar ./expandedExpression.g</TITLE>
</HEAD>
<BODY>
<table summary="" border="1" cellpadding="5">
<tr>
<td>
<font size="+2">Grammar ExpressionParser</font><br>
<a href="http://www.ANTLR.org">ANTLR</a>-generated HTML file from ./expandedExpression.g
<p>
Terence Parr, <a href="http://www.magelang.com">MageLang Institute</a>
<br>ANTLR Version 2.7.7 (2006-11-01); 1989-2005
</td>
</tr>
</table>
<PRE>

Definition of parser ExpressionParser, which is a subclass of LLkParser.


<a name="analyse_expression">analyse_expression</a>
	:	<a href="ExpressionParser.html#expression">expression</a> 
	|	
	;


<a name="expression">expression</a>
	:	<a href="ExpressionParser.html#logical_1">logical_1</a> ( B_IMPLIES <a href="ExpressionParser.html#logical_1">logical_1</a> )* 
	;


<a name="analyse_predicate">analyse_predicate</a>
	:	<a href="ExpressionParser.html#predicate">predicate</a> 
	|	
	;


<a name="predicate">predicate</a>
	:	<a href="ExpressionParser.html#plogical_1">plogical_1</a> ( B_IMPLIES <a href="ExpressionParser.html#plogical_1">plogical_1</a> )* 
	;


<a name="logical_1">logical_1</a>
	:	<a href="ExpressionParser.html#logical_2">logical_2</a> ( (	&quot;or&quot; 
			|	B_AND 
			) 
			<a href="ExpressionParser.html#logical_2">logical_2</a> )* 
	;


<a name="logical_2">logical_2</a>
	:	<a href="ExpressionParser.html#subset_description">subset_description</a> ( (	B_EQUIV 
			|	B_EQUAL 
			) 
			<a href="ExpressionParser.html#subset_description">subset_description</a> )* 
	;


<a name="subset_description">subset_description</a>
	:	( <a href="ExpressionParser.html#extended_pair">extended_pair</a> ( (	B_SUBSET 
				|	B_NOTSUBSET 
				|	B_STRICTSUBSET 
				|	B_NOTSTRICTSBSET 
				|	B_INSET 
				) 
				<a href="ExpressionParser.html#arithmetic_3">arithmetic_3</a> ) ) 
	|	<a href="ExpressionParser.html#arithmetic_3">arithmetic_3</a> 
	;


<a name="extended_pair">extended_pair</a>
	:	<a href="ExpressionParser.html#arithmetic_3">arithmetic_3</a> ( B_COMMA <a href="ExpressionParser.html#arithmetic_3">arithmetic_3</a> )* 
	;


<a name="arithmetic_3">arithmetic_3</a>
	:	<a href="ExpressionParser.html#sequence_description">sequence_description</a> ( (	B_NOTINSET 
			|	B_LESS 
			|	B_GREATER 
			|	B_NOTEQUAL 
			|	B_LESSTHANEQUAL 
			|	B_GREATERTHANEQUAL 
			) 
			<a href="ExpressionParser.html#sequence_description">sequence_description</a> )* 
	;


<a name="sequence_description">sequence_description</a>
	:	<a href="ExpressionParser.html#set_description">set_description</a> ( (	B_CONCATSEQ 
			|	B_PREAPPSEQ 
			|	B_APPSEQ 
			|	B_PREFIXSEQ 
			|	B_SUFFIXSEQ 
			) 
			<a href="ExpressionParser.html#set_description">set_description</a> )* 
	;


<a name="set_description">set_description</a>
	:	&quot;bool&quot; B_LPAREN <a href="ExpressionParser.html#expression">expression</a> B_RPAREN 
	|	<a href="ExpressionParser.html#functional_set">functional_set</a> 
	;


<a name="functional_set">functional_set</a>
	:	<a href="ExpressionParser.html#functional_const_set">functional_const_set</a> ( (	B_RELATION 
			|	B_PARTIAL 
			|	B_TOTAL 
			|	B_PARTIAL_INJECT 
			|	B_TOTAL_INJECT 
			|	B_PARTIAL_SURJECT 
			|	B_TOTAL_SURJECT 
			|	B_BIJECTION 
			) 
			<a href="ExpressionParser.html#functional_const_set">functional_const_set</a> )* 
	;


<a name="functional_const_set">functional_const_set</a>
	:	<a href="ExpressionParser.html#basic_constructors">basic_constructors</a> ( (	B_DOMAINRESTRICT 
			|	B_RANGERESTRICT 
			|	B_DOMAINSUBSTRACT 
			|	B_RANGESUBSTRACT 
			|	B_OVERRIDEFORWARD 
			|	B_OVERRIDEBACKWARD 
			|	B_RELPROD 
			) 
			<a href="ExpressionParser.html#basic_constructors">basic_constructors</a> )* 
	;


<a name="basic_constructors">basic_constructors</a>
	:	<a href="ExpressionParser.html#new_couple">new_couple</a> ( (	B_UNION 
			|	B_INTER 
			) 
			<a href="ExpressionParser.html#new_couple">new_couple</a> )* 
	;


<a name="new_couple">new_couple</a>
	:	<a href="ExpressionParser.html#arithmetic_0">arithmetic_0</a> ( B_MAPLET <a href="ExpressionParser.html#arithmetic_0">arithmetic_0</a> )* 
	;


<a name="arithmetic_0">arithmetic_0</a>
	:	<a href="ExpressionParser.html#arithmetic_1">arithmetic_1</a> ( (	B_POWER 
			|	B_MULT 
			) 
			<a href="ExpressionParser.html#arithmetic_1">arithmetic_1</a> )* 
	;


<a name="arithmetic_1">arithmetic_1</a>
	:	<a href="ExpressionParser.html#arithmetic_2">arithmetic_2</a> ( (	B_DIV 
			|	&quot;mod&quot; 
			) 
			<a href="ExpressionParser.html#arithmetic_2">arithmetic_2</a> )* 
	;


<a name="arithmetic_2">arithmetic_2</a>
	:	<a href="ExpressionParser.html#bases">bases</a> ( (	B_ADD 
			|	B_MINUS 
			) 
			<a href="ExpressionParser.html#bases">bases</a> )* 
	;


<a name="bases">bases</a>
	:	<a href="ExpressionParser.html#basic_sets">basic_sets</a> 
	|	<a href="ExpressionParser.html#basic_value">basic_value</a> 
		(	B_RANGE <a href="ExpressionParser.html#arithmetic_0">arithmetic_0</a> 
		|	
		) 
	|	B_SEQEMPTY 
	|	B_BRACKOPEN <a href="ExpressionParser.html#listPredicate">listPredicate</a> B_BRACKCLOSE 
	|	B_LESS <a href="ExpressionParser.html#listPredicate">listPredicate</a> B_GREATER 
	|	B_EMPTYSET 
	|	B_CURLYOPEN <a href="ExpressionParser.html#value_set">value_set</a> B_CURLYCLOSE 
	|	<a href="ExpressionParser.html#quantification">quantification</a> 
	|	<a href="ExpressionParser.html#q_lambda">q_lambda</a> 
	;


<a name="basic_sets">basic_sets</a>
	:	&quot;INT&quot; 
	|	&quot;INT1&quot; 
	|	&quot;INTEGER&quot; 
	|	&quot;INTEGER1&quot; 
	|	&quot;BOOL&quot; 
	|	&quot;NAT&quot; 
	|	&quot;NAT1&quot; 
	|	&quot;NATURAL&quot; 
	|	&quot;NATURAL1&quot; 
	|	&quot;STRING&quot; 
	;


<a name="basic_value">basic_value</a>
	:	B_ADD <a href="ExpressionParser.html#unary_basic_value_inverted">unary_basic_value_inverted</a> 
	|	B_MINUS <a href="ExpressionParser.html#unary_basic_value_inverted">unary_basic_value_inverted</a> 
	|	<a href="ExpressionParser.html#unary_basic_value_inverted">unary_basic_value_inverted</a> 
	|	B_ASTRING 
	|	<a href="ExpressionParser.html#is_record">is_record</a> 
	|	&quot;TRUE&quot; 
	|	&quot;FALSE&quot; 
	;


<a name="listPredicate">listPredicate</a>
	:	<a href="ExpressionParser.html#predicate">predicate</a> ( B_COMMA <a href="ExpressionParser.html#predicate">predicate</a> )* 
	;


<a name="value_set">value_set</a>
	:	<a href="ExpressionParser.html#alist_var">alist_var</a> ( B_SUCH <a href="ExpressionParser.html#expression">expression</a> ) 
	|	<a href="ExpressionParser.html#listPredicate">listPredicate</a> 
	;


<a name="quantification">quantification</a>
	:	(	B_FORALL 
		|	B_EXISTS 
		) 
		(	( B_LPAREN <a href="ExpressionParser.html#q_quantification">q_quantification</a> B_RPAREN ) 
		|	( <a href="ExpressionParser.html#q_quantification">q_quantification</a> ) 
		|	( B_LPAREN <a href="ExpressionParser.html#q_quantification">q_quantification</a> B_RPAREN ) 
		|	( B_LPAREN <a href="ExpressionParser.html#q_quantification">q_quantification</a> B_RPAREN ) 
		|	( <a href="ExpressionParser.html#q_quantification">q_quantification</a> ) 
		|	( <a href="ExpressionParser.html#q_quantification">q_quantification</a> ) 
		) 
	;


<a name="q_lambda">q_lambda</a>
	:	(	B_LAMBDA 
		|	&quot;PI&quot; 
		|	&quot;SIGMA&quot; 
		|	&quot;UNION&quot; 
		|	&quot;INTER&quot; 
		) 
		(	( B_LPAREN <a href="ExpressionParser.html#q_operande">q_operande</a> B_RPAREN ) 
		|	( <a href="ExpressionParser.html#q_operande">q_operande</a> ) 
		|	( B_LPAREN <a href="ExpressionParser.html#q_operande">q_operande</a> B_RPAREN ) 
		|	( B_LPAREN <a href="ExpressionParser.html#q_operande">q_operande</a> B_RPAREN ) 
		|	( <a href="ExpressionParser.html#q_operande">q_operande</a> ) 
		|	( <a href="ExpressionParser.html#q_operande">q_operande</a> ) 
		) 
	;


<a name="alist_var">alist_var</a>
	:	B_LPAREN <a href="ExpressionParser.html#list_identifier">list_identifier</a> B_RPAREN 
	|	<a href="ExpressionParser.html#list_identifier">list_identifier</a> 
	;


<a name="unary_basic_value_inverted">unary_basic_value_inverted</a>
	:	<a href="ExpressionParser.html#unary_basic_value">unary_basic_value</a> 
		(	B_TILDE 
		|	
		) 
	;


<a name="is_record">is_record</a>
	:	<a href="ExpressionParser.html#is_rec">is_rec</a> 
	|	<a href="ExpressionParser.html#is_struct">is_struct</a> 
	;


<a name="unary_basic_value">unary_basic_value</a>
	:	<a href="ExpressionParser.html#expInvertedParamInvertedQuoted">expInvertedParamInvertedQuoted</a> 
		(	B_BRACKOPEN <a href="ExpressionParser.html#predicate">predicate</a> B_BRACKCLOSE 
		|	
		) 
	|	B_NUMBER 
	;


<a name="expInvertedParamInvertedQuoted">expInvertedParamInvertedQuoted</a>
	:	<a href="ExpressionParser.html#expInvertedParamInverted">expInvertedParamInverted</a> ( B_QUOTEIDENT <a href="ExpressionParser.html#expInvertedParamInverted">expInvertedParamInverted</a> )* 
	;


<a name="expInvertedParamInverted">expInvertedParamInverted</a>
	:	<a href="ExpressionParser.html#expInvertedParam">expInvertedParam</a> 
		(	B_TILDE 
		|	
		) 
	;


<a name="expInvertedParam">expInvertedParam</a>
	:	<a href="ExpressionParser.html#expParentInverted">expParentInverted</a> ( B_LPAREN <a href="ExpressionParser.html#list_New_Predicate">list_New_Predicate</a> B_RPAREN )* 
	;


<a name="expParentInverted">expParentInverted</a>
	:	(	&quot;ran&quot; 
		|	&quot;not&quot; 
		|	&quot;dom&quot; 
		|	&quot;min&quot; 
		|	&quot;max&quot; 
		|	&quot;card&quot; 
		|	
		) 
		<a href="ExpressionParser.html#expression_parent">expression_parent</a> 
		(	B_TILDE 
		|	
		) 
	;


<a name="list_New_Predicate">list_New_Predicate</a>
	:	<a href="ExpressionParser.html#new_predicate">new_predicate</a> ( B_COMMA <a href="ExpressionParser.html#new_predicate">new_predicate</a> )* 
	;


<a name="expression_parent">expression_parent</a>
	:	B_LPAREN <a href="ExpressionParser.html#expression_func_composition">expression_func_composition</a> B_RPAREN 
	|	<a href="ExpressionParser.html#nameRenamedDecorated">nameRenamedDecorated</a> 
	;


<a name="expression_func_composition">expression_func_composition</a>
	:	<a href="ExpressionParser.html#expression">expression</a> ( (	B_SEMICOLON 
			|	B_PARALLEL 
			) 
			<a href="ExpressionParser.html#expression">expression</a> )* 
	;


<a name="nameRenamedDecorated">nameRenamedDecorated</a>
	:	<a href="ExpressionParser.html#nameRenamed">nameRenamed</a> 
		(	B_CPRED 
		|	
		) 
	;


<a name="dummy">dummy</a>
	:	
	|	APPLY_TO 
	|	B_SELECTOR 
	|	LIST_VAR 
	|	ELEM_SET 
	|	PARENT 
	|	B_NOT 
	|	B_DOM 
	|	B_RAN 
	|	B_MIN 
	|	B_MAX 
	|	B_CARD 
	|	B_MOD 
	;


<a name="nameRenamed">nameRenamed</a>
	:	B_IDENTIFIER ( B_POINT B_IDENTIFIER )* 
	;


protected <a name="plogical_1">plogical_1</a>
	:	<a href="ExpressionParser.html#plogical_2">plogical_2</a> ( (	&quot;or&quot; 
			|	B_AND 
			) 
			<a href="ExpressionParser.html#plogical_2">plogical_2</a> )* 
	;


protected <a name="plogical_2">plogical_2</a>
	:	<a href="ExpressionParser.html#psubset_description">psubset_description</a> ( (	B_EQUIV 
			|	B_EQUAL 
			) 
			<a href="ExpressionParser.html#psubset_description">psubset_description</a> )* 
	;


protected <a name="psubset_description">psubset_description</a>
	:	<a href="ExpressionParser.html#pextended_pair">pextended_pair</a> ( (	B_SUBSET 
			|	B_NOTSUBSET 
			|	B_STRICTSUBSET 
			|	B_NOTSTRICTSBSET 
			) 
			<a href="ExpressionParser.html#parithmetic_3">parithmetic_3</a> )* 
	;


protected <a name="pextended_pair">pextended_pair</a>
	:	<a href="ExpressionParser.html#parithmetic_3">parithmetic_3</a> ( B_COMMA <a href="ExpressionParser.html#parithmetic_3">parithmetic_3</a> )* 
	;


protected <a name="parithmetic_3">parithmetic_3</a>
	:	<a href="ExpressionParser.html#psequence_description">psequence_description</a> ( (	B_LESS 
			|	B_GREATER 
			|	B_NOTEQUAL 
			|	B_LESSTHANEQUAL 
			|	B_GREATERTHANEQUAL 
			) 
			<a href="ExpressionParser.html#psequence_description">psequence_description</a> )* 
	;


protected <a name="psequence_description">psequence_description</a>
	:	<a href="ExpressionParser.html#pset_description">pset_description</a> ( (	B_CONCATSEQ 
			|	B_PREAPPSEQ 
			|	B_APPSEQ 
			|	B_PREFIXSEQ 
			|	B_SUFFIXSEQ 
			) 
			<a href="ExpressionParser.html#pset_description">pset_description</a> )* 
	;


protected <a name="pset_description">pset_description</a>
	:	&quot;bool&quot; B_LPAREN <a href="ExpressionParser.html#expression">expression</a> B_RPAREN 
	|	<a href="ExpressionParser.html#pfunctional_set">pfunctional_set</a> 
	;


protected <a name="pfunctional_set">pfunctional_set</a>
	:	<a href="ExpressionParser.html#pfunctional_const_set">pfunctional_const_set</a> ( (	B_RELATION 
			|	B_PARTIAL 
			|	B_TOTAL 
			|	B_PARTIAL_INJECT 
			|	B_TOTAL_INJECT 
			|	B_PARTIAL_SURJECT 
			|	B_TOTAL_SURJECT 
			|	B_BIJECTION 
			) 
			<a href="ExpressionParser.html#pfunctional_const_set">pfunctional_const_set</a> )* 
	;


protected <a name="pfunctional_const_set">pfunctional_const_set</a>
	:	<a href="ExpressionParser.html#pset_constructors">pset_constructors</a> ( (	B_DOMAINRESTRICT 
			|	B_RANGERESTRICT 
			|	B_DOMAINSUBSTRACT 
			|	B_RANGESUBSTRACT 
			|	B_OVERRIDEFORWARD 
			|	B_OVERRIDEBACKWARD 
			|	B_RELPROD 
			) 
			<a href="ExpressionParser.html#pset_constructors">pset_constructors</a> )* 
	;


protected <a name="pset_constructors">pset_constructors</a>
	:	<a href="ExpressionParser.html#ppaire">ppaire</a> ( (	B_UNION 
			|	B_INTER 
			) 
			<a href="ExpressionParser.html#ppaire">ppaire</a> )* 
	;


protected <a name="ppaire">ppaire</a>
	:	<a href="ExpressionParser.html#parithmetic_0">parithmetic_0</a> ( B_MAPLET <a href="ExpressionParser.html#parithmetic_0">parithmetic_0</a> )* 
	;


protected <a name="parithmetic_0">parithmetic_0</a>
	:	<a href="ExpressionParser.html#parithmetic_1">parithmetic_1</a> ( (	B_POWER 
			|	B_MULT 
			) 
			<a href="ExpressionParser.html#parithmetic_1">parithmetic_1</a> )* 
	;


protected <a name="parithmetic_1">parithmetic_1</a>
	:	<a href="ExpressionParser.html#parithmetic_2">parithmetic_2</a> ( (	B_DIV 
			|	&quot;mod&quot; 
			) 
			<a href="ExpressionParser.html#parithmetic_2">parithmetic_2</a> )* 
	;


protected <a name="parithmetic_2">parithmetic_2</a>
	:	<a href="ExpressionParser.html#pbases">pbases</a> ( (	B_ADD 
			|	B_MINUS 
			) 
			<a href="ExpressionParser.html#pbases">pbases</a> )* 
	;


protected <a name="pbases">pbases</a>
	:	B_SEQEMPTY 
	|	B_BRACKOPEN <a href="ExpressionParser.html#listPredicate">listPredicate</a> B_BRACKCLOSE 
	|	B_LESS <a href="ExpressionParser.html#listPredicate">listPredicate</a> B_GREATER 
	|	<a href="ExpressionParser.html#basic_sets">basic_sets</a> 
	|	<a href="ExpressionParser.html#pbasic_value">pbasic_value</a> 
		(	B_RANGE <a href="ExpressionParser.html#parithmetic_0">parithmetic_0</a> 
		|	
		) 
	|	B_EMPTYSET 
	|	B_CURLYOPEN <a href="ExpressionParser.html#pvalue_set">pvalue_set</a> B_CURLYCLOSE 
	|	<a href="ExpressionParser.html#quantification">quantification</a> 
	|	<a href="ExpressionParser.html#q_lambda">q_lambda</a> 
	;


protected <a name="pbasic_value">pbasic_value</a>
	:	B_ADD <a href="ExpressionParser.html#punary_basic_value_inverted">punary_basic_value_inverted</a> 
	|	B_MINUS <a href="ExpressionParser.html#punary_basic_value_inverted">punary_basic_value_inverted</a> 
	|	<a href="ExpressionParser.html#punary_basic_value_inverted">punary_basic_value_inverted</a> 
	|	B_ASTRING 
	|	<a href="ExpressionParser.html#is_rec">is_rec</a> 
	|	&quot;TRUE&quot; 
	|	&quot;FALSE&quot; 
	;


protected <a name="pvalue_set">pvalue_set</a>
	:	<a href="ExpressionParser.html#alist_var">alist_var</a> B_SUCH <a href="ExpressionParser.html#expression">expression</a> 
	|	<a href="ExpressionParser.html#predicate">predicate</a> ( B_COMMA <a href="ExpressionParser.html#predicate">predicate</a> )* 
	;


protected <a name="punary_basic_value_inverted">punary_basic_value_inverted</a>
	:	<a href="ExpressionParser.html#punary_basic_value">punary_basic_value</a> 
		(	B_TILDE 
		|	
		) 
	;


<a name="is_rec">is_rec</a>
	:	&quot;rec&quot; B_LPAREN <a href="ExpressionParser.html#listRecord">listRecord</a> B_RPAREN 
	;


<a name="listRecord">listRecord</a>
	:	<a href="ExpressionParser.html#a_record">a_record</a> ( B_COMMA <a href="ExpressionParser.html#a_record">a_record</a> )* 
	;


protected <a name="punary_basic_value">punary_basic_value</a>
	:	<a href="ExpressionParser.html#predInvertedParamInvertedQuoted">predInvertedParamInvertedQuoted</a> 
		(	B_BRACKOPEN <a href="ExpressionParser.html#predicate">predicate</a> B_BRACKCLOSE 
		|	
		) 
	|	B_NUMBER 
	;


protected <a name="predInvertedParamInvertedQuoted">predInvertedParamInvertedQuoted</a>
	:	<a href="ExpressionParser.html#predInvertedParamInverted">predInvertedParamInverted</a> ( B_QUOTEIDENT <a href="ExpressionParser.html#predInvertedParamInverted">predInvertedParamInverted</a> )* 
	;


protected <a name="predInvertedParamInverted">predInvertedParamInverted</a>
	:	<a href="ExpressionParser.html#predInvertedParam">predInvertedParam</a> 
		(	B_TILDE 
		|	
		) 
	;


protected <a name="predInvertedParam">predInvertedParam</a>
	:	<a href="ExpressionParser.html#predParentInverted">predParentInverted</a> ( B_LPAREN <a href="ExpressionParser.html#list_New_Predicate">list_New_Predicate</a> B_RPAREN )* 
	;


protected <a name="predParentInverted">predParentInverted</a>
	:	(	&quot;ran&quot; 
		|	&quot;not&quot; 
		|	&quot;dom&quot; 
		|	&quot;min&quot; 
		|	&quot;max&quot; 
		|	&quot;card&quot; 
		|	
		) 
		<a href="ExpressionParser.html#pred_parent">pred_parent</a> 
		(	B_TILDE 
		|	
		) 
	;


<a name="pred_parent">pred_parent</a>
	:	B_LPAREN <a href="ExpressionParser.html#pred_func_composition">pred_func_composition</a> B_RPAREN 
	|	<a href="ExpressionParser.html#nameRenamedDecorated">nameRenamedDecorated</a> 
	;


<a name="pred_func_composition">pred_func_composition</a>
	:	<a href="ExpressionParser.html#predicate">predicate</a> ( (	B_SEMICOLON 
			|	B_PARALLEL 
			) 
			<a href="ExpressionParser.html#predicate">predicate</a> )* 
	;


<a name="q_quantification">q_quantification</a>
	:	<a href="ExpressionParser.html#alist_var">alist_var</a> B_POINT B_LPAREN <a href="ExpressionParser.html#expression">expression</a> B_RPAREN 
	;


<a name="q_operande">q_operande</a>
	:	<a href="ExpressionParser.html#alist_var">alist_var</a> B_POINT B_LPAREN <a href="ExpressionParser.html#expression">expression</a> B_SUCH <a href="ExpressionParser.html#expression">expression</a> B_RPAREN 
	;


<a name="is_struct">is_struct</a>
	:	&quot;struct&quot; B_LPAREN <a href="ExpressionParser.html#listRecord">listRecord</a> B_RPAREN 
	;


<a name="a_record">a_record</a>
	:	B_IDENTIFIER B_INSET <a href="ExpressionParser.html#pfunctional_set">pfunctional_set</a> 
	|	<a href="ExpressionParser.html#pfunctional_set">pfunctional_set</a> 
	|	<a href="ExpressionParser.html#is_struct">is_struct</a> 
	;


<a name="list_identifier">list_identifier</a>
	:	B_IDENTIFIER ( B_COMMA B_IDENTIFIER )* 
	;


<a name="new_predicate">new_predicate</a>
	:	<a href="ExpressionParser.html#expression">expression</a> ( (	B_SEMICOLON 
			|	B_PARALLEL 
			) 
			<a href="ExpressionParser.html#predicate">predicate</a> )* 
	;

</PRE>
</BODY>
</HTML>
