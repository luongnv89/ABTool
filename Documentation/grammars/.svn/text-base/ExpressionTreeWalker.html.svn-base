<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<HTML>
<HEAD>
<TITLE>Grammar ExpressionTreeWalker.g</TITLE>
</HEAD>
<BODY>
<table summary="" border="1" cellpadding="5">
<tr>
<td>
<font size="+2">Grammar ExpressionTreeWalker</font><br>
<a href="http://www.ANTLR.org">ANTLR</a>-generated HTML file from ExpressionTreeWalker.g
<p>
Terence Parr, <a href="http://www.magelang.com">MageLang Institute</a>
<br>ANTLR Version 2.7.7 (2006-11-01); 1989-2005
</td>
</tr>
</table>
<PRE>


Definition of tree parser ExpressionTreeWalker, which is a subclass of TreeParser.

	
	
<a name="is_record">is_record</a>
		:				 #( t1:"rec" 
	printToString(out.KeyWord(t1.getText()));
	printToString(out.Separator("("));
 listrecord 
	printToString(out.Separator(")"));
 ) 
		|				 #( t01:"struct" 
	printToString(out.KeyWord(t01.getText()));
	printToString(out.Separator("("));
 listrecord 
	printToString(out.Separator(")"));
 ) 
		;
	
	
<a name="listrecord">listrecord</a>
		:				 #( tt:B_COMMA listrecord 
	printToString("\n"+out.Separator(","));
 a_record ) 
		|	<a href="ExpressionTreeWalker.html#a_record">a_record</a> 
		;
	
	
<a name="a_record">a_record</a>
		:				 #( B_SELECTOR name:B_IDENTIFIER 
	printToString(name);
	printToString(out.Separator(":"));
 predicate ) 
		|	<a href="ExpressionTreeWalker.html#predicate">predicate</a> 
		;
	
	
/** 
 *  PREDICATE 
 **/
<a name="predicate">predicate</a>
		:				 #( t1:B_AND 
//	index.Add();
 predicate 
//	index.Retract();
	printToStringln("");	
//	index.Add();
	printToString(out.Separator(t1.getText()));

 predicate ) 
		|				 #( t2:"or" predicate 
	printToString(out.Separator(t2.getText()));
 predicate ) 
		|				 #( t3:B_IMPLIES predicate 
	printToString(out.Separator(t3.getText()));
 predicate ) 
		|				 #( t4:B_EQUIV predicate 
	printToString(out.Separator(t4.getText()));
 predicate ) 
		|				 #( t5:B_MULT predicate 
	printToString(out.Separator(t5.getText()) );
 predicate ) 
		|				 #( t6:B_POWER predicate 
	printToString(out.Separator(t6.getText()) );
 predicate ) 
		|				 #( t7:B_DIV predicate 
	printToString(out.Separator(t7.getText()) );
 predicate ) 
		|				 #( t8:"mod" predicate 
	printToString(out.Separator(t8.getText()) );
 predicate ) 
		|				 #( t9:UNARY_ADD 
	printToString(out.Separator(t9.getText()) );
 predicate ) 
		|				 #( t10:UNARY_MINUS 
	printToString(out.Separator(t10.getText()));
 predicate ) 
		|				 #( t11:B_ADD predicate 
	printToString(out.Separator(t11.getText()));
 predicate ) 
		|				 #( t12:B_MINUS predicate 
	printToString(out.Separator(t12.getText()));
 predicate ) 
		|				 #( t13:B_EQUAL predicate 
	printToString(out.Separator(t13.getText()));
 predicate ) 
		|				 #( t14:B_LESS predicate 
	printToString(out.Separator(t14.getText()));
 predicate ) 
		|				 #( t15:B_GREATER predicate 
	printToString(out.Separator(t15.getText()));
 predicate ) 
		|				 #( t16:B_NOTEQUAL predicate 
	printToString(out.Separator(t16.getText()));
 predicate ) 
		|				 #( t17:B_LESSTHANEQUAL predicate 
	printToString(out.Separator(t17.getText()));
 predicate ) 
		|				 #( t18:B_GREATERTHANEQUAL predicate 
	printToString(out.Separator(t18.getText()));
 predicate ) 
		|				 #( t19:B_INSET predicate 
	printToString(out.Separator(t19.getText()));
 predicate ) 
		|				 #( t20:B_NOTINSET predicate 
	printToString(out.Separator(t20.getText()));
 predicate ) 
		|				 #( t21:B_SUBSET predicate 
	printToString(out.Separator(t21.getText()));
 predicate ) 
		|				 #( t22:B_NOTSUBSET predicate 
	printToString(out.Separator(t22.getText()));
 predicate ) 
		|				 #( t23:B_STRICTSUBSET predicate 
	printToString(out.Separator(t23.getText()));
 predicate ) 
		|				 #( t24:B_NOTSTRICTSBSET predicate 
	printToString(out.Separator(t24.getText()));
 predicate ) 
		|				 #( t25:B_CONCATSEQ predicate 
    printToString(out.Separator(t25.getText()));
 predicate ) 
		|				 #( t26:B_PREAPPSEQ predicate 
    printToString(out.Separator(t26.getText()));
 predicate ) 
		|				 #( t27:B_APPSEQ predicate 
    printToString(out.Separator(t27.getText()));
 predicate ) 
		|				 #( t28:B_PREFIXSEQ predicate 
	printToString(out.Separator(t28.getText()));
 predicate ) 
		|				 #( t29:B_SUFFIXSEQ predicate 
	printToString(out.Separator(t29.getText()));
 predicate ) 
		|				 #( t30:B_RELATION predicate 
    printToString(out.Separator(t30.getText()));
 predicate ) 
		|				 #( t31:B_PARTIAL predicate 
    printToString(out.Separator(t31.getText()));
 predicate ) 
		|				 #( t32:B_TOTAL predicate 
    printToString(out.Separator(t32.getText()));
 predicate ) 
		|				 #( t33:B_PARTIAL_INJECT predicate 
    printToString(out.Separator(t33.getText()));
 predicate ) 
		|				 #( t34:B_TOTAL_INJECT predicate 
    printToString(out.Separator(t34.getText()));
 predicate ) 
		|				 #( t35:B_PARTIAL_SURJECT predicate 
    printToString(out.Separator(t35.getText()));
 predicate ) 
		|				 #( t36:B_TOTAL_SURJECT predicate 
    printToString(out.Separator(t36.getText()));
 predicate ) 
		|				 #( t37:B_BIJECTION predicate 
    printToString(out.Separator(t37.getText()));
 predicate ) 
		|				 #( t38:B_DOMAINRESTRICT predicate 
    printToString(out.Separator(t38.getText()));
 predicate ) 
		|				 #( t39:B_RANGERESTRICT predicate 
    printToString(out.Separator(t39.getText()));
 predicate ) 
		|				 #( t40:B_DOMAINSUBSTRACT predicate 
    printToString(out.Separator(t40.getText()));
 predicate ) 
		|				 #( t41:B_RANGESUBSTRACT predicate 			printToString(out.Separator(t41.getText())); predicate ) 
		|				 #( t42:B_OVERRIDEFORWARD predicate 			printToString(out.Separator(t42.getText())); predicate ) 
		|				 #( t43:B_OVERRIDEBACKWARD predicate 			printToString(out.Separator(t43.getText())); predicate ) 
		|				 #( t44:B_RELPROD predicate 			printToString(out.Separator(t44.getText())); predicate ) 
		|				 #( t45:B_UNION predicate 			printToString(out.Separator(t45.getText())); predicate ) 
		|				 #( t46:B_INTER predicate 
	printToString(out.Separator(t46.getText()));
 predicate ) 
		|				 #( t48:B_MAPLET predicate 
	printToString(out.Separator(t48.getText()));
 predicate ) 
		|				 #( t49:LIST_VAR predicate 
	printToString(out.Separator(t49.getText()));
 predicate ) 
		|				 #( B_NOT 
	printToString(out.KeyWord("not"));
 predicate ) 
		|				 #( B_RAN 
	printToString(out.KeyWord("ran"));
 predicate ) 
		|				 #( B_DOM 
	printToString(out.KeyWord("dom"));
 predicate ) 
		|				 #( B_MIN 
	printToString(out.KeyWord("min"));
 predicate ) 
		|				 #( B_MAX 
	printToString(out.KeyWord("max"));
 predicate ) 
		|				 #( B_CARD 
	printToString(out.KeyWord("card"));
 predicate ) 
		|	<a href="ExpressionTreeWalker.html#cset_description">cset_description</a> 
		;
	
	
<a name="list_New_Predicate">list_New_Predicate</a>
		:				 #( tt:B_COMMA list_New_Predicate 
	printToString(out.Separator(tt.getText()));
 new_predicate ) 
		|	<a href="ExpressionTreeWalker.html#new_predicate">new_predicate</a> 
		;
	
	
<a name="new_predicate">new_predicate</a>
		:				 #( t1:B_SEMICOLON new_predicate 
	printToString(out.Separator(t1.getText()));
 predicate ) 
		|				 #( t2:B_PARALLEL new_predicate 
	printToString(out.Separator(t2.getText()));
 predicate ) 
		|	<a href="ExpressionTreeWalker.html#predicate">predicate</a> 
		;
	
	
/**
 * Ne pas utiliser de fonction d&#039;impression pour le renommage ....
 **/
<a name="nameRenamed">nameRenamed</a>
		:	B_IDENTIFIER 
		|				 #( tt:B_POINT nameRenamed 
	printToString(tt.getText());
 nameRenamed ) 
		;
	
	
<a name="nameRenamedDecorated">nameRenamedDecorated</a>
		:				 #( tt:B_CPRED nameRenamed 
	printToString(out.Separator(tt.getText()));
 ) 
		|	<a href="ExpressionTreeWalker.html#nameRenamed">nameRenamed</a> 
		;
	
	
<a name="nameRenameDecoratedInverted">nameRenameDecoratedInverted</a>
		:				 #( tt:B_TILDE nameRenamedDecorated 
	printToString(out.Separator(tt.getText()));
 ) 
		|	<a href="ExpressionTreeWalker.html#nameRenamedDecorated">nameRenamedDecorated</a> 
		;
	
	
<a name="list_identifier">list_identifier</a>
		:				 #( tt:B_COMMA list_identifier 
	printToString(out.Separator(tt.getText()));
 n1:B_IDENTIFIER 
	printToString(n1);
 ) 
		|	B_IDENTIFIER 
		;
	
	
<a name="listPredicate">listPredicate</a>
		:				 #( tt:ELEM_SET listPredicate 
	printToString(out.Separator(tt.getText()));
 predicate ) 
		|	<a href="ExpressionTreeWalker.html#predicate">predicate</a> 
		;
	
	
<a name="a_func_call">a_func_call</a>
		:	<a href="ExpressionTreeWalker.html#afc">afc</a> 
		;
	
	
<a name="afc">afc</a>
		:				 #( FUNC_CALL_PARAM afc 
	printToString(out.Separator("("));
 listPredicate 
	printToString(out.Separator(")"));
 ) 
		|				 #( t1:B_QUOTEIDENT afc 
	printToString(out.Separator(t1.getText()));
 afc ) 
		|				 #( B_LPAREN afc 
	printToString(out.Separator("("));
 listPredicate 
	printToString(out.Separator(")"));
 ) 
		|	<a href="ExpressionTreeWalker.html#nameRenamed">nameRenamed</a> 
		;
	
	
<a name="list_func_call">list_func_call</a>
		:				 #( tt:B_COMMA list_func_call 
	printToString(out.Separator(tt.getText()));
 list_func_call ) 
		|	<a href="ExpressionTreeWalker.html#a_func_call">a_func_call</a> 
		;
	
	
<a name="cset_description">cset_description</a>
		:	<a href="ExpressionTreeWalker.html#basic_sets">basic_sets</a> 
		|	<a href="ExpressionTreeWalker.html#cbasic_value">cbasic_value</a> 
		|				 #( "bool" 
	printToString(out.KeyWord("bool"));
	printToString(out.Separator("("));
 predicate 
	printToString(out.Separator(")"));
 ) 
		|				 #( B_BRACKOPEN 
	printToString(out.Separator("["));
 listPredicate 
	printToString(out.Separator("]"));
 ) 
		|				 #( t2:B_RANGE predicate 
	printToString(out.Separator(t2.getText()));
 predicate ) 
		|	B_EMPTYSET 
		|				 #( t4:B_CURLYOPEN 
	printToString(out.Separator("{"));
 cvalue_set 
	printToString(out.Separator("}"));
 ) 
		|	B_SEQEMPTY 
		|	<a href="ExpressionTreeWalker.html#is_record">is_record</a> 
		|	<a href="ExpressionTreeWalker.html#quantification">quantification</a> 
		|	<a href="ExpressionTreeWalker.html#q_lambda">q_lambda</a> 
		;
	
	
<a name="basic_sets">basic_sets</a>
		:	&quot;INT&quot; 
		|	&quot;INT1&quot; 
		|	&quot;INTEGER&quot; 
		|	&quot;INTEGER1&quot; 
		|	&quot;BOOL&quot; 
		|	&quot;NAT&quot; 
		|	&quot;NAT1&quot; 
		|	&quot;NATURAL&quot; 
		|	&quot;NATURAL1&quot; 
		|	&quot;STRING&quot; 
		;
	
	
<a name="cbasic_value">cbasic_value</a>
		:	B_ASTRING 
		|	B_NUMBER 
		|				 #( B_TILDE predicate 
	printToString(out.Separator("~"));
 ) 
		|	<a href="ExpressionTreeWalker.html#nameRenamedDecorated">nameRenamedDecorated</a> 
		|				 #( B_LPAREN predicate 
	printToString(out.Separator("("));
 list_New_Predicate 
	printToString(out.Separator(")"));
 ) 
		|				 #( PARENT 
	printToString(out.Separator("("));
 pred_func_composition 
	printToString(out.Separator(")"));
 ) 
		|				 #( B_QUOTEIDENT predicate 
	printToString(out.Separator("'"));
 predicate ) 
		|				 #( APPLY_TO predicate 
	printToString(out.Separator("["));
 predicate 
	printToString(out.Separator("]"));
 ) 
		|	&quot;TRUE&quot; 
		|	&quot;FALSE&quot; 
		;
	
	
<a name="cvalue_set">cvalue_set</a>
		:				 #( t1:B_SUCH list_var 
	printToString(out.Separator(t1.getText()));
 predicate ) 
		|				 #( t2:ELEM_SET cvalue_set 
	printToString(out.Separator(t2.getText()));
 predicate ) 
		|	<a href="ExpressionTreeWalker.html#predicate">predicate</a> 
		;
	
	
<a name="quantification">quantification</a>
		:				 #( t70:B_FORALL 
	printToString(out.Separator(t70.getText()));
 list_var 
	printToString(out.Separator(".("));
 predicate 
	printToString(out.Separator(")"));
 ) 
		|				 #( t71:B_EXISTS 
	printToString(out.Separator(t71.getText()));
 list_var 
	printToString(out.Separator(".("));
 predicate 
	printToString(out.Separator(")"));
 ) 
		;
	
	
<a name="q_lambda">q_lambda</a>
		:				 #( t1:B_LAMBDA 
	printToString(out.Separator(t1.getText()));
 q_operande ) 
		|				 #( t2:"PI" 
	printToString(out.KeyWord(t2.getText()));
 q_operande ) 
		|				 #( t3:"SIGMA" 
	printToString(out.KeyWord(t3.getText()));
 q_operande ) 
		|				 #( t4:"UNION" 
	printToString(out.KeyWord(t4.getText()));
 q_operande ) 
		|				 #( t5:"INTER" 
	printToString(out.KeyWord(t5.getText()));
 q_operande ) 
		;
	
	
<a name="list_var">list_var</a>
		:				 #( B_LPAREN 
	printToString(out.Separator("("));
 list_identifier 
	printToString(out.Separator(")"));
 ) 
		|	<a href="ExpressionTreeWalker.html#list_identifier">list_identifier</a> 
		;
	
	
<a name="pred_func_composition">pred_func_composition</a>
		:				 #( B_SEMICOLON pred_func_composition 
	printToString(out.Separator(";"));
 predicate ) 
		|				 #( t2:B_PARALLEL pred_func_composition 
	printToString(out.Separator(t2.getText()));
 predicate ) 
		|				 #( t3:B_COMMA pred_func_composition 
	printToString(out.Separator(t3.getText()));
 predicate ) 
		|	<a href="ExpressionTreeWalker.html#predicate">predicate</a> 
		;
	
	
<a name="q_operande">q_operande</a>
		:				 #( t1:B_SUCH list_var 
	printToString(out.Separator(".("));
 predicate 
	printToString(out.Separator(t1.getText()));
 predicate 
	printToString(out.Separator(")"));
 ) 
		;

