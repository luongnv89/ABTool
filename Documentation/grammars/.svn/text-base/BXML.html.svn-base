<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<HTML>
<HEAD>
<TITLE>Grammar ./expandedBXML.g</TITLE>
</HEAD>
<BODY>
<table summary="" border="1" cellpadding="5">
<tr>
<td>
<font size="+2">Grammar BXML</font><br>
<a href="http://www.ANTLR.org">ANTLR</a>-generated HTML file from ./expandedBXML.g
<p>
Terence Parr, <a href="http://www.magelang.com">MageLang Institute</a>
<br>ANTLR Version 2.7.7 (2006-11-01); 1989-2005
</td>
</tr>
</table>
<PRE>


Definition of tree parser BXML, which is a subclass of TreeParser.

	
	
<a name="composant">composant</a>
		:	
			(	<a href="BXML.html#machine">machine</a> 
			|	<a href="BXML.html#refinement">refinement</a> 
			|	<a href="BXML.html#implementation">implementation</a> 
			) 
			
		;
	
	
<a name="machine">machine</a>
		:				 #( "MACHINE" 
	printToStringln("<MACHINE>");
 head_component clauses 
	printToString("</MACHINE>");
 ) 
		;
	
	
<a name="refinement">refinement</a>
		:				 #( "REFINEMENT" 
	
	printToStringln("<REFINEMENT>");
 head_component clauses 
	printToString("</REFINEMENT>");
 ) 
		;
	
	
<a name="implementation">implementation</a>
		:				 #( "IMPLEMENTATION" 
	printToStringln("<IMPLEMENTATION>");
 head_component clauses 
	printToString("</IMPLEMENTATION>");
 ) 
		;
	
	
<a name="head_component">head_component</a>
		:	<a href="BXML.html#paramName">paramName</a> 
		;
	
	
<a name="clauses">clauses</a>
		:	( <a href="BXML.html#clause">clause</a> )* 
		;
	
	
<a name="paramName">paramName</a>
		:	
			(					 #( B_LPAREN 
	printToString("<B_LPAREN>");
 paramName listTypedIdentifier 
	printToString("</B_LPARENT>");
 ) 
			|	<a href="BXML.html#an_id">an_id</a> 
			) 
			
		;
	
	
<a name="listTypedIdentifier">listTypedIdentifier</a>
		:	
			(					 #( B_COMMA 
	printToString("<ListIdent>");
 listTypedIdentifier listTypedIdentifier 
	printToString("</ListIdent>");
 ) 
			|	<a href="BXML.html#typedIdentifier">typedIdentifier</a> 
			) 
			
		;
	
	
<a name="an_id">an_id</a>
		:	B_IDENTIFIER 
		;
	
	
<a name="clause">clause</a>
		:	
			(	<a href="BXML.html#constraints">constraints</a> 
			|	<a href="BXML.html#refines">refines</a> 
			|	<a href="BXML.html#link">link</a> 
			|	<a href="BXML.html#sets">sets</a> 
			|	<a href="BXML.html#values">values</a> 
			|	<a href="BXML.html#constants">constants</a> 
			|	<a href="BXML.html#properties">properties</a> 
			|	<a href="BXML.html#variables">variables</a> 
			|	<a href="BXML.html#invariant">invariant</a> 
			|	<a href="BXML.html#assertions">assertions</a> 
			|	<a href="BXML.html#definitions">definitions</a> 
			|	<a href="BXML.html#initialisation">initialisation</a> 
			|	<a href="BXML.html#operations">operations</a> 
			) 
			
		;
	
	
<a name="constraints">constraints</a>
		:				 #( "CONSTRAINTS" 
	printToStringln("<Constraints>");
 predicate 
	printToStringln("</Constraints>");
 ) 
		;
	
	
<a name="refines">refines</a>
		:				 #( "REFINES" 
	printToStringln("<Refines>");
 an_id 
	printToStringln(name);
	printToStringln("</Refines>");
 ) 
		;
	
	
<a name="link">link</a>
		:	<a href="BXML.html#uses">uses</a> 
		|	<a href="BXML.html#includes">includes</a> 
		|	<a href="BXML.html#sees">sees</a> 
		|	<a href="BXML.html#extendeds">extendeds</a> 
		|	<a href="BXML.html#promotes">promotes</a> 
		|	<a href="BXML.html#imports">imports</a> 
		;
	
	
<a name="sets">sets</a>
		:				 #( "SETS" 
	printToStringln("<Sets>");
 sets_declaration 
	printToStringln("</Sets>");
 ) 
		;
	
	
<a name="values">values</a>
		:				 #( "VALUES" 
	printToStringln("<Values>");
 list_valuation 
	printToStringln("</Values>");
 ) 
		;
	
	
<a name="constants">constants</a>
		:				 #( "CONSTANTS" 
	printToStringln("<ConcreteConstants>");
 listTypedIdentifier 
	printToStringln("</ConcreteConstants>");
 ) 
		|				 #( "CONCRETE_CONSTANTS" 
	printToStringln("<ConcreteConstants>");
 listTypedIdentifier 
	printToStringln("</ConcreteConstants>");
 ) 
		|				 #( "VISIBLE_CONSTANTS" 
	printToStringln("<AbstractConstants>");
 listTypedIdentifier 
	printToStringln("</AbstractConstants>");
 ) 
		|				 #( "ABSTRACT_CONSTANTS" 
	printToStringln("<AbstractConstants>");
 listTypedIdentifier 
	printToStringln("</AbstractConstants>");
 ) 
		|				 #( "HIDDEN_CONSTANTS" 
	printToStringln("<ConcreteConstants>");
 listTypedIdentifier 
	printToStringln("</ConcreteConstants>");
 ) 
		;
	
	
<a name="properties">properties</a>
		:				 #( "PROPERTIES" 
	printToStringln("<Properties>");
 predicate 
	printToStringln("</Properties>");
 ) 
		;
	
	
<a name="variables">variables</a>
		:				 #( "VARIABLES" 
	printToStringln("<ConcreteVariables>");
 listTypedIdentifier 
	printToStringln("</ConcreteVariables>");
 ) 
		|				 #( "ABSTRACT_VARIABLES" 
	printToStringln("<AbstractVariables>");
 listTypedIdentifier 
	printToStringln("</AbstractVariables>");
 ) 
		|				 #( "VISIBLE_VARIABLES" 
	printToStringln("<AbstractVariables>");
 listTypedIdentifier 
	printToStringln("</AbstractVariables>");
 ) 
		|				 #( "CONCRETE_VARIABLES" 
	printToStringln("<ConcreteVariables>");
 listTypedIdentifier 
	printToStringln("</ConcreteVariables>");
 ) 
		|				 #( "HIDDEN_VARIABLES" 
	printToStringln("<ConcreteVariables>");
 listTypedIdentifier 
	printToStringln("</ConcreteVariables>");
 ) 
		;
	
	
<a name="invariant">invariant</a>
		:				 #( "INVARIANT" 
	printToStringln("<Invariant>");


 predicate 
	printToStringln("</Invariant>");
 ) 
		;
	
	
<a name="assertions">assertions</a>
		:				 #( "ASSERTIONS" 
	printToStringln("<Assertions>");
 list_assertions 
	printToStringln("</Assertions>");
 ) 
		;
	
	
<a name="definitions">definitions</a>
		:				 #( "DEFINITIONS" 
	printToStringln("<Definitions>");
 list_def 
	printToStringln("</Definitions>");
 ) 
		;
	
	
<a name="initialisation">initialisation</a>
		:				 #( "INITIALISATION" 
	printToStringln("<Initialisation>");
 instruction 
	printToStringln("</Initialisation>");
 ) 
		;
	
	
<a name="operations">operations</a>
		:				 #( "OPERATIONS" 
	printToStringln("<Operations>");

System.out.println(myBuffer.toString());
 listOperation 
	printToStringln("</Operations>");
 ) 
		;
	
	
<a name="typedIdentifier">typedIdentifier</a>
		:	
			(					 #( B_INSET 
	printToString("<B_INSET>");
 nameRenamed predicate 
	printToString("</B_INSET>");
 ) 
			|	<a href="BXML.html#nameRenamed">nameRenamed</a> 
			) 
			
		;
	
	
<a name="nameRenamed">nameRenamed</a>
		:	B_IDENTIFIER 
		|				 #( B_POINT nameRenamed nameRenamed ) 
		;
	
	
<a name="predicate">predicate</a>
		:				 #( BTRUE 
   printToString("<BTRUE>");
 ) 
		|				 #( B_NOT 
	printToString("<Neg>");
 predicate 
	printToString("</Neg>");
 ) 
		|				 #( B_AND 
	printToString("<And>");
 predicate predicate 
	printToString("</And");
 ) 
		|				 #( "or" 
	printToString("<Or>");
 predicate predicate 
	printToString("</Or>");
 ) 
		|				 #( B_IMPLIES 
	printToString("<Implies>");
 predicate predicate 
	printToString("</Implies>");
 ) 
		|				 #( B_EQUIV 
	printToString("<Equiv>");
 predicate predicate 
	printToString("</Equiv>");
 ) 
		|				 #( B_MULT 
	printToString("<Mul>");
 predicate predicate 
	printToString("</Mul>");
 ) 
		|				 #( B_POWER 
	printToString("<Puissance>");
 predicate predicate 
	printToString("</Puissance>");
 ) 
		|				 #( B_DIV 
	printToString("<Div>");
 predicate predicate 
	printToString("</Div>");
 ) 
		|				 #( "mod" 
	printToString("<Modulo>");
 predicate predicate 
	printToString("</Modulo>");
 ) 
		|				 #( UNARY_ADD 
	printToString("<Plus>");
 predicate 
	printToString("</Plus>");
 ) 
		|				 #( UNARY_MINUS 
	printToString("<UMinus>");
 predicate 
	printToString("</UMinus>");
 ) 
		|				 #( B_ADD 
	printToString("<Plus>");
 predicate predicate 
	printToString("</Plus>");
 ) 
		|				 #( B_MINUS 
	printToString("<Minus>");
 predicate predicate 
	printToString("</Minus>");
 ) 
		|				 #( B_EQUAL 
	printToString("<Equal>");
 predicate predicate 
	printToString("</Equal>");
 ) 
		|				 #( B_LESS 
	printToString("<Less>");
 predicate predicate 
	printToString("</Less>");
 ) 
		|				 #( B_GREATER 
	printToString("<Greater>");
 predicate predicate 
	printToString("</Greater>");
 ) 
		|				 #( B_NOTEQUAL 
	printToString("<NotEqual>");
 predicate predicate 
	printToString("</NotEqual>");
 ) 
		|				 #( B_LESSTHANEQUAL 
	printToString("<LessEqual>");
 predicate predicate 
	printToString("</LessEqual>");
 ) 
		|				 #( B_GREATERTHANEQUAL 
	printToString("<GreaterEqual>");
 predicate predicate 
	printToString("</GreaterEqual>");
 ) 
		|				 #( B_INSET 
	printToString("<In>");
 predicate predicate 
	printToString("</In>");
 ) 
		|				 #( B_NOTINSET 
	printToString("<NotIn>");
 predicate predicate 
	printToString("</NotIn>");
 ) 
		|				 #( B_SUBSET 
	printToString("<SubSet>");
 predicate predicate 
	printToString("</SubSet>");
 ) 
		|				 #( B_NOTSUBSET 
	printToString("<NotSubSet>");
 predicate predicate 
	printToString("</NotSubSet>");
 ) 
		|				 #( B_STRICTSUBSET 
	printToString("<StrictSubSet>");
 predicate predicate 
	printToString("</StrictSubSet>");
 ) 
		|				 #( B_NOTSTRICTSBSET 
	printToString("<NotStrictSubSet>");
 predicate predicate 
	printToString("</NotStrictSubSet>");
 ) 
		|				 #( B_CONCATSEQ 
	printToString("<ConcatSeq>");
 predicate predicate 
	printToString("</ConcatSeq>");
 ) 
		|				 #( B_PREAPPSEQ 
	printToString("<>");
 predicate predicate ) 
		|				 #( B_APPSEQ predicate predicate ) 
		|				 #( B_PREFIXSEQ 
	printToString("<PrefixSeq>");
 predicate predicate 
	printToString("</PrefixSeq>");
 ) 
		|				 #( B_SUFFIXSEQ 
	printToString("<SuffixSeq>");
 predicate predicate 
	printToString("</SuffixSeq>");
 ) 
		|				 #( B_RELATION predicate predicate ) 
		|				 #( B_PARTIAL 
	printToString("<PartialFunc>");
 predicate predicate 
	printToString("</PartialFunc>");
 ) 
		|				 #( B_TOTAL 
	printToString("<TotalFunc>");
 predicate predicate 
	printToString("</TotalFunc>");
 ) 
		|				 #( B_PARTIAL_INJECT 
	printToString("<PartialInj>");
 predicate predicate 
	printToString("</PartialInj>");
 ) 
		|				 #( B_TOTAL_INJECT 
	printToString("<TotalInj>");
 predicate predicate 
	printToString("</TotalInj>");
 ) 
		|				 #( B_PARTIAL_SURJECT 
	printToString("<PartialSurj>");
 predicate predicate 
	printToString("</PartialSurj>");
 ) 
		|				 #( B_TOTAL_SURJECT 
	printToString("<TotalSurj>");
 predicate predicate 
	printToString("</TotalSurj>");
 ) 
		|				 #( B_BIJECTION 
	printToString("<TotalBij>");
 predicate predicate 
	printToString("</TotalBij>");
 ) 
		|				 #( B_DOMAINRESTRICT 
	printToString("<DomRestrict>");
 predicate predicate 
	printToString("</DomRestrict>");
 ) 
		|				 #( B_RANGERESTRICT 
	printToString("<RanRestrict>");
 predicate predicate 
	printToString("</RanRestrict>");
 ) 
		|				 #( B_DOMAINSUBSTRACT 
	printToString("<DomSubstract>");
 predicate predicate 
	printToString("</DomSubstract>");
 ) 
		|				 #( B_RANGESUBSTRACT 
	printToString("<RanSubstract>");
 predicate predicate 
	printToString("</RanSubstract>");
 ) 
		|				 #( B_OVERRIDEFORWARD 
	printToString("<OverRideFwd>");
 predicate predicate 
	printToString("</OverRideFwd>");
 ) 
		|				 #( B_OVERRIDEBACKWARD 
	printToString("<OverRideBck>");
 predicate predicate 
	printToString("</OverRideBck>");
 ) 
		|				 #( B_RELPROD 
	printToString("<RelProd>");
 predicate predicate 
	printToString("</RelProd>");
 ) 
		|				 #( B_UNION 
	printToString("<UnionSets>");
 predicate predicate 
	printToString("</UnionSets>");
 ) 
		|				 #( B_INTER 
	printToString("<InterSets>");
 predicate predicate 
	printToString("</InterSets>");
 ) 
		|				 #( B_MAPLET 
	printToString("<Maplet>");
 predicate predicate 
	printToString("</Maplet>");
 ) 
		|				 #( LIST_VAR predicate predicate ) 
		|				 #( B_RAN 
	printToString("<Ran>");
 predicate 
	printToString("</Ran>");
 ) 
		|				 #( B_DOM 
	printToString("<Dom>");
 predicate 
	printToString("</Dom>");
 ) 
		|	<a href="BXML.html#basic_sets">basic_sets</a> 
		|	<a href="BXML.html#cbasic_value">cbasic_value</a> 
		|				 #( "bool" 
	printToString("<BoolEvaluation>");
 predicate 
	printToString("</BoolEvaluation>");
 ) 
		|				 #( B_BRACKOPEN listPredicate ) 
		|				 #( B_RANGE 
	printToString("<SetRange>");
 predicate predicate 
	printToString("</SetRange>");
 ) 
		|				 #( B_CURLYOPEN cvalue_set ) 
		|	( B_SEQEMPTY ) 
		|	<a href="BXML.html#is_record">is_record</a> 
		|	<a href="BXML.html#quantification">quantification</a> 
		|	<a href="BXML.html#q_lambda">q_lambda</a> 
		;
	
	
<a name="uses">uses</a>
		:				 #( "USES" 
	printToStringln("<Uses>");
 listNames 
	printToStringln("</Uses>");
 ) 
		;
	
	
<a name="includes">includes</a>
		:				 #( "INCLUDES" 
	printToStringln("<Includes>");
 listInstanciation 
	printToStringln("</Includes>");
 ) 
		;
	
	
<a name="sees">sees</a>
		:				 #( "SEES" 
	printToStringln("<Sees>");
 listNames 
	printToStringln("</Sees>");
 ) 
		;
	
	
<a name="extendeds">extendeds</a>
		:				 #( "EXTENDS" 
	printToStringln("<Extends>");
 listInstanciation 
	printToStringln("</Extends>");
 ) 
		;
	
	
<a name="promotes">promotes</a>
		:				 #( "PROMOTES" 
	printToStringln("<Promotes>");
 listNames 
	printToStringln("</Promotes>");
 ) 
		;
	
	
<a name="imports">imports</a>
		:				 #( "IMPORTS" 
	printToStringln("<Imports>");
 listInstanciation 
	printToStringln("</Imports>");
 ) 
		;
	
	
<a name="listInstanciation">listInstanciation</a>
		:	
			(					 #( B_COMMA 
	printToString("<B_COMMA>");
 listInstanciation paramRenameValuation 
	printToString("</B_COMMA>");
 ) 
			|	<a href="BXML.html#paramRenameValuation">paramRenameValuation</a> 
			) 
			
		;
	
	
<a name="listNames">listNames</a>
		:	
			(					 #( B_COMMA 
	printToString("<B_COMMA>");
 listNames nameRenamed 
	printToString("</B_COMMA>");
 ) 
			|	<a href="BXML.html#nameRenamed">nameRenamed</a> 
			) 
			
		;
	
	
<a name="paramRenameValuation">paramRenameValuation</a>
		:				 #( B_LPAREN 
	printToString("<B_PARENT>");
 paramRenameValuation list_New_Predicate 
	printToString("</B_PARENT>");
 ) 
		|	<a href="BXML.html#nameRenamed">nameRenamed</a> 
		;
	
	
<a name="list_New_Predicate">list_New_Predicate</a>
		:				 #( B_COMMA list_New_Predicate new_predicate ) 
		|	<a href="BXML.html#new_predicate">new_predicate</a> 
		;
	
	
<a name="sets_declaration">sets_declaration</a>
		:	
			(					 #( B_SEMICOLON 
	printToStringln("<B_SEMICOLON>");
 sets_declaration sets_declaration 
	printToStringln("</B_SEMICOLON>");
 ) 
			|					 #( B_COMMA 
	printToStringln("<B_COMMA>");
 sets_declaration sets_declaration 
	printToStringln("</B_COMMA>");
 ) 
			|	<a href="BXML.html#set_declaration">set_declaration</a> 
			) 
			
		;
	
	
<a name="set_declaration">set_declaration</a>
		:	
			(					 #( B_EQUAL 
	printToStringln("<B_EQUAL>");
 an_id valuation_set 
	printToStringln("</B_EQUAL>");
 ) 
			|	<a href="BXML.html#an_id">an_id</a> 
			) 
			
		;
	
	
<a name="valuation_set">valuation_set</a>
		:	
			(					 #( B_CURLYOPEN 
	printToString("<B_CURLYOPEN>");
 list_couple 
	printToString("</B_CURLYOPEN>");
 ) 
			|	<a href="BXML.html#is_record">is_record</a> 
			|					 #( B_MULT 
	printToString("<B_MULT>");
 valuation_set valuation_set 
	printToString("</B_MULT>");
 ) 
			|					 #( B_ADD 
	printToString("<B_ADD>");
 valuation_set valuation_set 
	printToString("</B_ADD>");
 ) 
			|					 #( B_MINUS 
	printToString("<B_MINUS>");
 valuation_set valuation_set 
	printToString("</B_MINUS>");
 ) 
			|	<a href="BXML.html#an_id">an_id</a> 
			|	<a href="BXML.html#basic_sets">basic_sets</a> 
			) 
			
		;
	
	
<a name="is_record">is_record</a>
		:				 #( "rec" 
	printToStringln("<rec>");
 listrecord 
	printToStringln("</rec>");
 ) 
		|				 #( "struct" 
	printToStringln("<struct>");
 listrecord 
	printToString("</struc>");
 ) 
		;
	
	
<a name="listrecord">listrecord</a>
		:	
			(					 #( B_COMMA 
	printToString("<B_COMMA>");
 listrecord a_record 
	printToString("</B_COMMA>");
 ) 
			|	<a href="BXML.html#a_record">a_record</a> 
			) 
			
		;
	
	
<a name="list_couple">list_couple</a>
		:	
			(					 #( B_COMMA 
	printToString("<B_COMMA>");
 list_couple couple 
	printToString("</B_COMMA>");
 ) 
			|	<a href="BXML.html#couple">couple</a> 
			) 
			
		;
	
	
<a name="basic_sets">basic_sets</a>
		:	
			(	&quot;INT&quot; 
			|	&quot;INTEGER&quot; 
			|	&quot;BOOL&quot; 
			|	&quot;NAT&quot; 
			|	&quot;NAT1&quot; 
			|	&quot;NATURAL&quot; 
			|	&quot;NATURAL1&quot; 
			|	&quot;STRING&quot; 
			|	B_EMPTYSET 
			) 
			
		;
	
	
<a name="a_record">a_record</a>
		:	
			(					 #( B_SELECTOR 
	printToString("<B_SELECTOR>");
 an_id predicate 
	printToString("</B_SELECTOR>");
 ) 
			|	<a href="BXML.html#predicate">predicate</a> 
			) 
			
		;
	
	
<a name="couple">couple</a>
		:	
			(					 #( B_MAPLET 
	printToString("<B_MAPLET>");
 a_set_value a_set_value 
	printToString("</B_MAPLET>");
 ) 
			|					 #( B_LPAREN 
	printToString("<B_LPARENT>");
 parent_couple 
	printToString("</B_LPARENT>");
 ) 
			|	<a href="BXML.html#a_set_value">a_set_value</a> 
			) 
			
		;
	
	
<a name="a_set_value">a_set_value</a>
		:	
			(	<a href="BXML.html#an_id">an_id</a> 
			|					 #( B_MINUS 
	printToString("<B_MINUS>");
 B_NUMBER 
	printToString("</B_MINUS>");
 ) 
			|	B_NUMBER 
			|	&quot;TRUE&quot; 
			|	&quot;FALSE&quot; 
			) 
			
		;
	
	
<a name="parent_couple">parent_couple</a>
		:	
			(					 #( B_MAPLET 
	printToString("<B_MAPLET>");
 a_set_value a_set_value 
	printToString("</B_MAPLET>");
 ) 
			|					 #( B_COMMA 
	printToString("<B_COMMA>");
 a_set_value a_set_value 
	printToString("</B_COMMA>");
 ) 
			|	<a href="BXML.html#a_set_value">a_set_value</a> 
			) 
			
		;
	
	
<a name="list_valuation">list_valuation</a>
		:				 #( B_SEMICOLON 
	printToStringln("<B_SEMICOLON>");
 list_valuation set_valuation 
	printToStringln("</B_SEMICOLON>");
 ) 
		|	<a href="BXML.html#set_valuation">set_valuation</a> 
		;
	
	
<a name="set_valuation">set_valuation</a>
		:				 #( B_EQUAL 
	printToStringln("<B_EQUAL>");
 an_id new_set_or_constant_valuation 
	printToStringln("</B_EQUAL>");
 ) 
		;
	
	
<a name="new_set_or_constant_valuation">new_set_or_constant_valuation</a>
		:	<a href="BXML.html#predicate">predicate</a> 
		;
	
	
<a name="set_interval_value">set_interval_value</a>
		:				 #( B_EQUAL 
	printToStringln("<B_EQUAL>");
 an_id interval_declaration 
	printToStringln("</B_EQUAL>");
 ) 
		;
	
	
<a name="interval_declaration">interval_declaration</a>
		:				 #( B_RANGE 
	printToStringln("<B_RANGE>");
 predicate predicate 
	printToStringln("</B_RANGE>");
 ) 
		;
	
	
<a name="set_rename_value">set_rename_value</a>
		:				 #( B_EQUAL 
	printToStringln("<B_EQUAL>");
 an_id an_id 
	printToStringln("</B_EQUAL>");
 ) 
		;
	
	
<a name="list_def">list_def</a>
		:				 #( LIST_DEF 
	printToStringln("<LIST_DEF>");
 list_def definition 
	printToStringln("</LIST_DEF>");
 ) 
		|	<a href="BXML.html#definition">definition</a> 
		;
	
	
<a name="definition">definition</a>
		:				 #( B_DOUBLE_EQUAL 
	printToString("<Definition>");
	printToString("<Header>");
 paramName 
	printToString("</Header>");
 formalText 
	printToString("</Definition>");
 ) 
		|	B_ASTRING 
		;
	
	
<a name="formalText">formalText</a>
		:				 #( EXP_DEF predicate ) 
		|				 #( SUBST_DEF instruction ) 
		|	<a href="BXML.html#operation">operation</a> 
		;
	
	
<a name="instruction">instruction</a>
		:				 #( PARALLEL 
	printToStringln("<Parallel>");
 instruction instruction 
	printToStringln("</Parallel>");
 ) 
		|				 #( SEQUENTIAL 
	printToStringln("<Sequence>");
 instruction instruction 
	printToStringln("</Sequence>");
 ) 
		|				 #( "skip" 
	printToString("<Skip> </Skip>");
 ) 
		|				 #( "BEGIN" 
	printToStringln("<Block>");
 instruction 
	printToString("</Block>");
 ) 
		|				 #( "PRE" 
	printToStringln("<Pre>");
 predicate instruction 
	printToStringln("</Pre>");
 ) 
		|				 #( "ASSERT" 
    printToStringln("<Assert>");
 predicate instruction 
    printToString("</Assert>");
 ) 
		|				 #( "IF" 
    printToStringln("<If>");
 predicate branche_then ( branche_elsif )* ( branche_else | ) 
	printToString("</If>");
 ) 
		|				 #( "CHOICE" 
	printToStringln("<Choice>");
 list_or 
	printToString("</Choice>");
 ) 
		|				 #( "CASE" 
    printToStringln("<Case>");
 predicate branche_either ( branche_or )* ( branche_else | ) 
   printToStringln("</Case>");
 ) 
		|				 #( "ANY" 
	printToStringln("<Any>");
 listTypedIdentifier predicate instruction 
	printToStringln("</Any>");
 ) 
		|				 #( "LET" 
    printToStringln("<Let>");
 listTypedIdentifier list_equal instruction 
	printToStringln("</Let>");
 ) 
		|				 #( "SELECT" 
    printToStringln("<Select>");
 predicate branche_then ( branche_when )* ( branche_else | ) 
    printToStringln("</Select>");
 ) 
		|				 #( "WHILE" 
    printToStringln("<While>");
 predicate instruction variant_or_no 
   printToStringln("</While>");
 ) 
		|				 #( "VAR" 
    printToStringln("<Var>");
 listTypedIdentifier instruction 
    printToStringln("</Var>");
 ) 
		|	<a href="BXML.html#simple_affect">simple_affect</a> 
		;
	
	
<a name="operation">operation</a>
		:				 #( OP_DEF operationHeader instruction ) 
		;
	
	
<a name="list_assertions">list_assertions</a>
		:				 #( B_SEMICOLON 
	printToString("<B_SEMICOLON>");
 list_assertions list_assertions 
	printToString("</B_SEMICOLON>");
 ) 
		|	<a href="BXML.html#predicate">predicate</a> 
		;
	
	
<a name="listOperation">listOperation</a>
		:				 #( B_SEMICOLON 
	printToString("<B_SEMICOLON>");
 listOperation operation 
	printToString("</B_SEMICOLON>");
 ) 
		|	<a href="BXML.html#operation">operation</a> 
		;
	
	
<a name="operationHeader">operationHeader</a>
		:	
			(					 #( B_OUT 
	printToStringln("<Results>");
 listTypedIdentifier 
	printToStringln("</Results>");
 paramName ) 
			|	<a href="BXML.html#paramName">paramName</a> 
			) 
			
		;
	
	
<a name="branche_then">branche_then</a>
		:				 #( "THEN" 
    printToStringln("<Then>");
 instruction 
    printToStringln("</Then>");
 ) 
		;
	
	
<a name="branche_elsif">branche_elsif</a>
		:				 #( "ELSIF" 
    printToStringln("<Elsif>");
 predicate instruction 
    printToStringln("</Elsif>");
 ) 
		;
	
	
<a name="branche_else">branche_else</a>
		:				 #( "ELSE" 
    printToStringln("<Else>");
 instruction 
    printToStringln("</Else>");
 ) 
		;
	
	
<a name="list_or">list_or</a>
		:				 #( "OR" 
    printToStringln("<Or>");
 list_or instruction 
    printToStringln("</Or>");
 ) 
		|	<a href="BXML.html#instruction">instruction</a> 
		;
	
	
<a name="branche_either">branche_either</a>
		:				 #( "EITHER" 
    printToStringln("<Either>");
 predicate instruction 
    printToStringln("</Either>");
 ) 
		;
	
	
<a name="branche_or">branche_or</a>
		:				 #( tt:"OR" predicate instruction ) 
		;
	
	
<a name="list_equal">list_equal</a>
		:				 #( B_AND 
    printToStringln("<B_AND>");
 list_equal an_equal 
    printToStringln("<B_AND>");
 ) 
		|	<a href="BXML.html#an_equal">an_equal</a> 
		;
	
	
<a name="branche_when">branche_when</a>
		:				 #( "WHEN" 
    printToStringln("<When>");
 predicate instruction 
    printToStringln("</When>");
 ) 
		;
	
	
<a name="variant_or_no">variant_or_no</a>
		:				 #( "VARIANT" 
    printToStringln("<Variant>");
 predicate 
    printToStringln("</Variant>");
 #( "INVARIANT" 
    printToStringln("<Invariant>");
 predicate 
    printToStringln("</Invariant>");
 ) ) 
		|				 #( "INVARIANT" 
    printToStringln("<Invariant>");
 predicate 
    printToStringln("</Invariant>");
 #( "VARIANT" 
    printToStringln("<Variant>");
 predicate 
    printToStringln("</Variant>");
 ) ) 
		;
	
	
<a name="simple_affect">simple_affect</a>
		:				 #( B_SIMPLESUBST 
    printToStringln("<B_SIMPLESUBST>");
 list_func_call predicate 
    printToStringln("</B_SIMPLESUBST>");
 ) 
		|				 #( B_OUT 
    printToStringln("<B_OUT>");
 list_func_call func_call 
    printToStringln("</B_OUT>");
 ) 
		|				 #( INSET 
    printToStringln("<INSET>");
 list_func_call predicate 
    printToStringln("</INSET>");
 ) 
		|				 #( B_BECOME_ELEM 
    printToStringln("<B_BECOME_ELEM>");
 list_func_call predicate 
    printToStringln("</B_BECOME_ELEM>");
 ) 
		|	<a href="BXML.html#a_func_call">a_func_call</a> 
		;
	
	
<a name="an_equal">an_equal</a>
		:				 #( B_EQUAL an_id predicate ) 
		;
	
	
<a name="func_call">func_call</a>
		:				 #( B_TILDE 
    printToStringln("<B_TILDE>");
 func_call 
    printToStringln("</B_TILDE>");
 ) 
		|				 #( APPLY_TO 
    printToStringln("<APPLY_TO>");
 func_call list_New_Predicate 
    printToStringln("</APPLY_TO>");
 ) 
		|				 #( B_LPAREN 
    printToStringln("<B_LPAREN>");
 func_call list_New_Predicate 
    printToStringln("</B_LPAREN>");
 ) 
		|				 #( B_QUOTEIDENT 
    printToStringln("<B_QUOTEIDENT>");
 func_call func_call 
    printToStringln("<B_QUOTEIDENT>");
 ) 
		|	<a href="BXML.html#nameRenamed">nameRenamed</a> 
		;
	
	
<a name="func_param">func_param</a>
		:	<a href="BXML.html#list_New_Predicate">list_New_Predicate</a> 
		;
	
	
<a name="a_func_call">a_func_call</a>
		:	<a href="BXML.html#afc">afc</a> 
		;
	
	
<a name="afc">afc</a>
		:				 #( FUNC_CALL_PARAM 
    printToStringln("<FUNC_CALL_PARAM>");
 afc listPredicate 
    printToStringln("</FUNC_CALL_PARAM>");
 ) 
		|				 #( t1:B_QUOTEIDENT 
    printToStringln("<B_QUOTEIDENT>");
 afc afc 
    printToStringln("</B_QUOTEIDENT>");
 ) 
		|	<a href="BXML.html#nameRenamed">nameRenamed</a> 
		;
	
	
<a name="listPredicate">listPredicate</a>
		:				 #( B_COMMA listPredicate predicate ) 
		|	<a href="BXML.html#predicate">predicate</a> 
		;
	
	
<a name="list_func_call">list_func_call</a>
		:				 #( tt:B_COMMA 
    printToStringln("<B_COMMA>");
 list_func_call a_func_call 
    printToStringln("</B_COMMA>");
 ) 
		|	<a href="BXML.html#a_func_call">a_func_call</a> 
		;
	
	
<a name="analyze_PO">analyze_PO</a>
		:				 #( PO analyze_PO analyze_PO ) 
		|	<a href="BXML.html#analyze_APO">analyze_APO</a> 
		;
	
	
<a name="analyze_APO">analyze_APO</a>
		:				 #( APO 
   initializeString();

   printToString("<ProofObligation>");
 
   printToString("<Predicate>");
 predicate 
   printToString("</Predicate>");
 
   printToString("</ProofObligation>");

   finalizeString();
 ) 
		;
	
	
<a name="new_predicate">new_predicate</a>
		:				 #( B_SEMICOLON new_predicate predicate ) 
		|				 #( B_PARALLEL new_predicate predicate ) 
		|	<a href="BXML.html#predicate">predicate</a> 
		;
	
	
<a name="nameRenamedDecorated">nameRenamedDecorated</a>
		:				 #( B_CPRED nameRenamed ) 
		|	<a href="BXML.html#nameRenamed">nameRenamed</a> 
		;
	
	
<a name="nameRenameDecoratedInverted">nameRenameDecoratedInverted</a>
		:				 #( B_TILDE nameRenamedDecorated ) 
		|	<a href="BXML.html#nameRenamedDecorated">nameRenamedDecorated</a> 
		;
	
	
<a name="list_identifier">list_identifier</a>
		:				 #( B_COMMA list_identifier n1:B_IDENTIFIER ) 
		|	B_IDENTIFIER 
		;
	
	
<a name="cbasic_value">cbasic_value</a>
		:	B_ASTRING 
		|	B_NUMBER 
		|				 #( B_TILDE 
    printToString("<Tilde>");
 predicate 
    printToString("</Tilde>");
 ) 
		|	<a href="BXML.html#nameRenamedDecorated">nameRenamedDecorated</a> 
		|				 #( B_LPAREN predicate 
	printToString("<PredParen>");
 list_New_Predicate 
	printToString("</PredParen>");
 ) 
		|				 #( PARENT 
	printToString("<PredParen>");
 pred_func_composition 
	printToString("</PredParen>");
 ) 
		|				 #( B_QUOTEIDENT predicate predicate ) 
		|				 #( APPLY_TO predicate predicate ) 
		|	( &quot;TRUE&quot; ) 
		|	( &quot;FALSE&quot; ) 
		;
	
	
<a name="cvalue_set">cvalue_set</a>
		:				 #( t1:B_SUCH list_var predicate ) 
		|				 #( t2:B_COMMA cvalue_set predicate ) 
		|	<a href="BXML.html#predicate">predicate</a> 
		;
	
	
<a name="quantification">quantification</a>
		:				 #( B_FORALL printToString("<ForAll>"); list_var predicate printToString("</ForAll>"); ) 
		|				 #( B_EXISTS printToString("<Exists>"); list_var predicate printToString("</Exists>"); ) 
		;
	
	
<a name="q_lambda">q_lambda</a>
		:				 #( B_LAMBDA 
	printToString("<Lambda>");
 q_operande 
	printToString("</Lambda>");
 ) 
		|				 #( "PI" 
	printToString("<PI>");
 q_operande 
	printToString("</PI>");
 ) 
		|				 #( "SIGMA" 
	printToString("<SIGMA>");
 q_operande 
	printToString("</SIGMA>");
 ) 
		|				 #( "UNION" 
	printToString("<UnionQ>");
 q_operande 
	printToString("</UnionQ>");
 ) 
		|				 #( "INTER" 
	printToString("<InterQ>");
 q_operande 
	printToString("</InterQ>");
 ) 
		;
	
	
<a name="list_var">list_var</a>
		:	
			(					 #( B_LPAREN list_identifier ) 
			|	<a href="BXML.html#list_identifier">list_identifier</a> 
			) 
			
		;
	
	
<a name="pred_func_composition">pred_func_composition</a>
		:				 #( B_SEMICOLON 
	printToString("<RelSeqComp>");
 pred_func_composition predicate 
	printToString("</RelSeqComp>");
 ) 
		|				 #( B_PARALLEL 
	printToString("<ParallelComp>");
 pred_func_composition predicate 
	printToString("</ParallelComp>");
 ) 
		|				 #( B_COMMA pred_func_composition predicate ) 
		|	<a href="BXML.html#predicate">predicate</a> 
		;
	
	
<a name="q_operande">q_operande</a>
		:				 #( B_SUCH list_var predicate predicate ) 
		;

